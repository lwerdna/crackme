// 2008 andrewl

#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

DWORD crc_table[0x100] =
{
    0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA,
    0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,
    0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988,
    0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91,
    0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,
    0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,
    0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC,
    0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5,
    0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172,
    0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,
    0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940,
    0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,
    0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116,
    0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,
    0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,
    0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,
    0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A,
    0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,
    0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818,
    0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,
    0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,
    0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457,
    0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C,
    0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,
    0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,
    0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB,
    0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0,
    0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,
    0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086,
    0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,
    0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4,
    0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD,
    0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A,
    0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683,
    0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,
    0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,
    0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE,
    0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7,
    0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC,
    0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,
    0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252,
    0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,
    0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60,
    0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79,
    0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,
    0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F,
    0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04,
    0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,
    0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A,
    0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,
    0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38,
    0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21,
    0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E,
    0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,
    0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,
    0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,
    0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2,
    0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB,
    0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0,
    0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,
    0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6,
    0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF,
    0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,
    0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D
};
 
UCHAR crc_index[0x100] =
{
    0x00, 0x41, 0xC3, 0x82, 0x86, 0xC7, 0x45, 0x04, 
    0x4D, 0x0C, 0x8E, 0xCF, 0xCB, 0x8A, 0x08, 0x49, 
    0x9A, 0xDB, 0x59, 0x18, 0x1C, 0x5D, 0xDF, 0x9E, 
    0xD7, 0x96, 0x14, 0x55, 0x51, 0x10, 0x92, 0xD3, 
    0x75, 0x34, 0xB6, 0xF7, 0xF3, 0xB2, 0x30, 0x71, 
    0x38, 0x79, 0xFB, 0xBA, 0xBE, 0xFF, 0x7D, 0x3C, 
    0xEF, 0xAE, 0x2C, 0x6D, 0x69, 0x28, 0xAA, 0xEB, 
    0xA2, 0xE3, 0x61, 0x20, 0x24, 0x65, 0xE7, 0xA6, 
    0xEA, 0xAB, 0x29, 0x68, 0x6C, 0x2D, 0xAF, 0xEE, 
    0xA7, 0xE6, 0x64, 0x25, 0x21, 0x60, 0xE2, 0xA3, 
    0x70, 0x31, 0xB3, 0xF2, 0xF6, 0xB7, 0x35, 0x74, 
    0x3D, 0x7C, 0xFE, 0xBF, 0xBB, 0xFA, 0x78, 0x39, 
    0x9F, 0xDE, 0x5C, 0x1D, 0x19, 0x58, 0xDA, 0x9B, 
    0xD2, 0x93, 0x11, 0x50, 0x54, 0x15, 0x97, 0xD6, 
    0x05, 0x44, 0xC6, 0x87, 0x83, 0xC2, 0x40, 0x01, 
    0x48, 0x09, 0x8B, 0xCA, 0xCE, 0x8F, 0x0D, 0x4C, 
    0x95, 0xD4, 0x56, 0x17, 0x13, 0x52, 0xD0, 0x91, 
    0xD8, 0x99, 0x1B, 0x5A, 0x5E, 0x1F, 0x9D, 0xDC, 
    0x0F, 0x4E, 0xCC, 0x8D, 0x89, 0xC8, 0x4A, 0x0B, 
    0x42, 0x03, 0x81, 0xC0, 0xC4, 0x85, 0x07, 0x46, 
    0xE0, 0xA1, 0x23, 0x62, 0x66, 0x27, 0xA5, 0xE4, 
    0xAD, 0xEC, 0x6E, 0x2F, 0x2B, 0x6A, 0xE8, 0xA9, 
    0x7A, 0x3B, 0xB9, 0xF8, 0xFC, 0xBD, 0x3F, 0x7E, 
    0x37, 0x76, 0xF4, 0xB5, 0xB1, 0xF0, 0x72, 0x33, 
    0x7F, 0x3E, 0xBC, 0xFD, 0xF9, 0xB8, 0x3A, 0x7B, 
    0x32, 0x73, 0xF1, 0xB0, 0xB4, 0xF5, 0x77, 0x36, 
    0xE5, 0xA4, 0x26, 0x67, 0x63, 0x22, 0xA0, 0xE1, 
    0xA8, 0xE9, 0x6B, 0x2A, 0x2E, 0x6F, 0xED, 0xAC, 
    0x0A, 0x4B, 0xC9, 0x88, 0x8C, 0xCD, 0x4F, 0x0E, 
    0x47, 0x06, 0x84, 0xC5, 0xC1, 0x80, 0x02, 0x43, 
    0x90, 0xD1, 0x53, 0x12, 0x16, 0x57, 0xD5, 0x94, 
    0xDD, 0x9C, 0x1E, 0x5F, 0x5B, 0x1A, 0x98, 0xD9
};


void table_reverse(UCHAR MSB, PUCHAR index, PDWORD value)
{
    int i;
    for(i=0; i<0x100; ++i)
        if((crc_table[i]&0xFF000000)>>24 == MSB)
            break;

    *index = i;
    *value = crc_table[i];
}

UCHAR index_of_index(DWORD target)
{
    UCHAR i;
    for(i=0; i<0x100; ++i)
        if(crc_index[i]==target)
            break;

    return i;
}

// C = crc_reverse(M, key)
//
DWORD crc_reverse(DWORD M, DWORD key)
{
    UCHAR t;
    DWORD u;
    
    // output array
    UCHAR output[8]={0};
    *(PDWORD)&output[0] = M;

    // key bytes
    PUCHAR kb = (PUCHAR)&key;

    for(int i=1; i<5; ++i)
    {
        UINT index = kb[i-1] ^ output[i-1];
        output[i-1] ^= index;

        *(PDWORD)(output+i) ^= crc_table[index];

        UCHAR recovered = index_of_index(index);
        output[i+3] = recovered;

    }

    return *(PDWORD)(output+4);
}

// M = crc_forward(P, key)
//
DWORD crc_forward(DWORD C, DWORD key)
{
    unsigned char output[8];
 
    *(PDWORD)&output[0] = key;
    *(PDWORD)&output[4] = C;
 
    for (unsigned char i = 4; i > 0; --i)
    {
        unsigned char index = crc_index[output[i + 3]];

        DWORD xorval = crc_table[index];
 
        *(PDWORD)&output[i] ^= xorval;
        output[i - 1] ^= index;
    }
 
    return *(PDWORD)output;
}
 

void main(void)
{
    srand(time(0));

    DWORD target = crc_reverse(0xDEADBEEF, 0xBA55E732);
    PUCHAR pt = (PUCHAR) &target;

    printf("[*] requiring dword: %08X\n", target);

    // some extended ascii characters
    UCHAR eascii[16] = {    0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
                            0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F  };

    // extended ascii counterparts after GetDlgItemTextA()
    UCHAR gdita[16] = {     0xC7, 0xFC, 0xE9, 0xE2, 0xE4, 0xE0, 0xE5, 0xE7,
                            0xEA, 0xEB, 0xE8, 0xEF, 0xEE, 0xEC, 0xC4, 0xC5  };

    UCHAR key[9];
    UCHAR key_after[9];
    key[8] = key_after[8] = 0;

    for(int i=0; i<8; i+=2)
    {
        do
        {
            UCHAR goal_byte = pt[i/2];

            if(goal_byte & 0x80) // use extended ascii chars to get MSB set
            {
                UINT r = rand() % 16;
                key[i] = eascii[r];
                key_after[i] = gdita[r];

                key[i+1] = gdita[r] ^ goal_byte;
                key_after[i+1] = key[i+1];
            }
            else // otherwise use normal ascii chars
            {
                UINT r = 33 + (rand() % 93);
                key[i] = key_after[i] = r;
                key[i+1] = key_after[i+1] = key[i] ^ goal_byte;
            }
        }
        while(key[i+1]<33 || key[i+1]>126); // ensure printable character
    }

    printf("[*] key ascii hex values: ");
    for(int i=0; i<8; ++i) printf("%02X ", key[i]);
    printf("\n");

    printf("[*] key ascii hex values after GetDlgItemTextA(): ");
    for(int i=0; i<8; ++i) printf("%02X ", key_after[i]);
    printf("\n");

    printf("[*]\n");
    printf("[*] key: %s\n", key);
    printf("[*]\n");
}
