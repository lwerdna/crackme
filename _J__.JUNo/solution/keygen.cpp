// important function in keygen for Juno
// 2008 andrewl

extern "C" __declspec(dllexport) void KGEntry()
{
    CHAR name[33+2]={0}; // afraid of newlines overflowing
    CHAR company[33+2]={0};
    CHAR userid[25+2]={0};

    DWORD key[3]={0};
    DWORD msg[3]={0};

    HANDLE hStdIn;

    DWORD dwRet;
    
    if(!(hStdIn = GetStdHandle(STD_INPUT_HANDLE)))
        { ReportError("GetStdHandle"); goto cleanup; }

    printf("Juno Keygen by andrewl\n");
    printf("\n");
    printf("name (at least 4, no more than 32 characters): ");
    ReadConsole(hStdIn, name, 32, &dwRet, 0);
    printf("company (at least 4, no more than 32 characters): ");
    ReadConsole(hStdIn, company, 32, &dwRet, 0);
    printf("userid (exactly 24 characters): ");
    ReadConsole(hStdIn, userid, 24, &dwRet, 0);
    if(strlen(userid) != 24)
        { printf("USERID MUST BE 24 CHARACTERS!!! GENERATED BY JUNO!!\n"); goto cleanup; }

    StripNewline(name);
    StripNewline(company);

    GetHashUserIdFromCrackme(userid, key);
    printf("96-bit key derived from hash of user: %08X %08X %08X\n", key[0], key[1], key[2]); 

    GetMessageFromCrackme(name, company, msg);
    printf("96-bit target plaintext derived from name/company: %08X %08X %08X\n", msg[0], msg[1], msg[2]);

    printf("Crackme now compares D(serial, key) to plaintext\n");
    printf("So we compute serial == E(plaintext, key) == ciphertext\n");

    // 3way call
    encrypt(msg, key);

    printf("96-bit ciphertext: %08X %08X %08X\n", msg[0], msg[1], msg[2]);

    printf("**********************************************************\n");
    printf("**********************************************************\n");
    printf("SERIAL:\n");
    printf("    %08X-%08X-%08X\n", msg[0], msg[1], msg[2]);
    printf("**********************************************************\n");
    printf("**********************************************************\n");


    cleanup:

    _getch();

    ExitProcess(0);
}

