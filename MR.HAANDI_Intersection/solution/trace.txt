This is a walk-through of the calculations assuming GetTickCount() @40E711 returns 0xFFFFFFFF
and the provided serial is entered!

* nop out the GetTickCount()
eb 40e711 31 c0 48 90 90 90

PointA = [ \
((+2842271803*x^5 +0131690647*x^4 +4156969949*x^3 +3746455294*x^2 +0628579242*x^1 +2361017629*x^0)*Mod(1,p))%m, \
((+4016367385*x^5 +2329238747*x^4 +2260841201*x^3 +3385008325*x^2 +3614064443*x^1 +0117428241*x^0)*Mod(1,p))%m, \
((+3437718441*x^5 +1450895703*x^4 +3918476104*x^3 +2086868649*x^2 +1638612588*x^1 +1441414064*x^0)*Mod(1,p))%m, \
((+2995270019*x^5 +3695742188*x^4 +4144697843*x^3 +2445042676*x^2 +1982063046*x^1 +0998991137*x^0)*Mod(1,p))%m \
];

PointB = [ \
((+3989364853*x^5 +0115724639*x^4 +0284217963*x^3 +3664906030*x^2 +4104504421*x^1 +1908119556*x^0)*Mod(1,p))%m, \
((+0419593291*x^5 +0142358558*x^4 +1719332116*x^3 +0853685456*x^2 +2600068677*x^1 +0043331810*x^0 )*Mod(1,p))%m, \
((+1919090511*x^5 +3817636701*x^4 +3326742980*x^3 +1380461678*x^2 +2832482354*x^1 +2782252193*x^0 )*Mod(1,p))%m, \
((+1777791494*x^5 +2792368212*x^4 +1862492839*x^3 +2006547967*x^2 +4096141700*x^1 +2286909155*x^0 )*Mod(1,p))%m \
];

hash(name)->number (here MR.HAANDI converts to 2418411290696412)

first point multiply:
compute to_ZZ(MD5(name)) * PointA, result is:
A=Mod((1361804515*x^5 + 2626665251*x^4 + 1329986356*x^3 + 1561607736*x^2 + 2214499504*x + 1514783758)*Mod(1,p),m)
B=Mod((1821761625*x^5 + 3512873513*x^4 + 3024089562*x^3 + 3350925119*x^2 + 1171482103*x + 2813293087)*Mod(1,p),m)
C=Mod((2009919751*x^5 + 844593583*x^4 + 1002451551*x^3 + 4054912964*x^2 + 4176703820*x + 652543575)*Mod(1,p),m)
D=Mod((3093237694*x^5 + 2680601244*x^4 + 2773130885*x^3 + 3155320950*x^2 + 3363114448*x + 3768813515)*Mod(1,p),m)

then does A * D^-1
then does B * D^-1
then does C * D^-1

resulting in this:

(23:46) gp > lift(A*(D^-1))
%62 = Mod(3421842732, 4294967291)*x^5 + Mod(3151483921, 4294967291)*x^4 + Mod(1395125133, 4294967291)*x^3 + 
      Mod(890330189, 4294967291)*x^2 + Mod(3126643223, 4294967291)*x + Mod(2939271805, 4294967291)
(23:48) gp > lift(B*(D^-1))
%63 = Mod(3622647449, 4294967291)
(23:48) gp > lift(C*(D^-1))
%64 = Mod(717155609, 4294967291)
converts these coeff's to dwords... (x^0 term first, ...) sequential in memory (18 total)

af31ba7d ba5cca17 35115c4d 5327eb8d bbd7d411 cbf52d2c 
d7ed3699 00000000 00000000 00000000 00000000 00000000 
2abeed19 00000000 00000000 00000000 00000000 00000000 

then all these bytes are hashed (md5)
hash output: 16 f2 aa b2 e8 7b 51 fa a4 d0 80 6d 16 cf 20 08

the 16 digest bytes themselves are hashed now...
== 197EBFE5EE9B44104AC02AC6C2EEF1FD

and then converted to a number -> "5619858642284813"

processing the serial
---------------------
0012f6f8  44 6f 6e 27 74 20 67 65-74 20 63 6f 6e 66 75 73  Don't get confus
0012f708  65 64 20 3d 29 20 68 61-6a 34 6a 4f 73 37 00 00  ed =) haj4jOs7..
0x1E long
is base 60 number, most significant in front
lookup was: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwx"
final answer:  -> 18225923690521628478004036645069549649647

this is new exponent: 18225923690521628478004036645069549649647

original pointA is raised to this exponent, result is:
after second run:
----------------
23375597*x^5 + 1909529145*x^4 + 40975275*x^3 + 3166165834*x^2 + 4044897735*x + 649416036
2717057604*x^5 + 993858536*x^4 + 3356226580*x^3 + 634866378*x^2 + 1961174837*x + 13173288
3267827102*x^5 + 941615750*x^4 + 3837824568*x^3 + 2531237196*x^2 + 977555427*x + 1545297645
235997047*x^5 + 1247733418*x^4 + 3949244439*x^3 + 507797794*x^2 + 3128596172*x + 2313432926

same exponent: 18225923690521628478004036645069549649647
is used on these above values
after third run:
---------------
1188767563*x^5 + 2320164956*x^4 + 2214106647*x^3 + 2596603181*x^2 + 393511470*x + 2470943107
3009271615*x^5 + 3222667663*x^4 + 4162042009*x^3 + 3640931611*x^2 + 1429461180*x + 2772294330
2422856491*x^5 + 1973320211*x^4 + 68455999*x^3 + 2157931634*x^2 + 4211700205*x + 2579116780
1985575378*x^5 + 3983190601*x^4 + 2082453711*x^3 + 760910169*x^2 + 2142735644*x + 3435328036

same exponent: 18225923690521628478004036645069549649647
is used on these above values
after fourth run:
----------------
1064684384*x^5 + 1856827152*x^4 + 3771566054*x^3 + 297689701*x^2 + 2426258887*x + 3912247867
4075935505*x^5 + 753290125*x^4 + 4212218833*x^3 + 1390815970*x^2 + 4179159749*x + 3360455359
2133146689*x^5 + 2287891288*x^4 + 1815067355*x^3 + 2318050379*x^2 + 244252440*x + 3173175843
364095073*x^5 + 1482690294*x^4 + 4294535834*x^3 + 31714234*x^2 + 1795371845*x + 2266799556

now the hash exponent is used: 5619858642284813 on pointB!
-----------------------------
result:
1209826708*x^5 + 2787703913*x^4 + 1555978501*x^3 + 961126281*x^2 + 472969330*x + 1511534124
3864080609*x^5 + 3016365625*x^4 + 1577436712*x^3 + 3568344206*x^2 + 1744224723*x + 3692117614
71009817*x^5 + 555612682*x^4 + 238630819*x^3 + 3081310595*x^2 + 1802676111*x + 487871376
325367641*x^5 + 3675885046*x^4 + 2210304838*x^3 + 1305472042*x^2 + 2023567746*x + 296652904

now both of these results are added to each other:
-------------------------------------------------
3534638659*x^5 + 2681339617*x^4 + 1754790177*x^3 + 1474682805*x^2 + 2044017746*x + 1065675649
2290056938*x^5 + 2756194542*x^4 + 2651342700*x^3 + 3757021258*x^2 + 3165545134*x + 4278200678
202451421*x^5 + 864965483*x^4 + 1358330715*x^3 + 896939387*x^2 + 3672563458*x + 4079182912
3230859339*x^5 + 1338749856*x^4 + 2101773602*x^3 + 4007611841*x^2 + 25663568*x + 637559380

now sum.A * sum.D^-1 =
now sum.B * sum.D^-1 = <save coefficients>
now sum.C * sum.D^-1
---------------------
+3421842732*x^5 +3151483921*x^4 +1395125133*x^3 +0890330189*x^2 +3126643223*x^1 +2939271805*x^0
get these digits:
0012f670  af31ba7d ba5cca17 35115c4d 5327eb8d
0012f680  bbd7d411 cbf52d2c d7ed3699 00000000
0012f690  00000000 00000000 00000000 00000000
0012f6a0  2abeed19 00000000 00000000 00000000
0012f6b0  00000000 00000000
as byte array:
unsigned char foo[] =
{
    0x7D, 0xBA, 0x31, 0xAF, 0x17, 0xCA, 0x5C, 0xBA, // }.1...\.
    0x4D, 0x5C, 0x11, 0x35, 0x8D, 0xEB, 0x27, 0x53, // M\.5..'S
    0x11, 0xD4, 0xD7, 0xBB, 0x2C, 0x2D, 0xF5, 0xCB, // ....,-..
    0x99, 0x36, 0xED, 0xD7, 0x00, 0x00, 0x00, 0x00, // .6......
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
    0x19, 0xED, 0xBE, 0x2A, 0x00, 0x00, 0x00, 0x00, // ...*....
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  // ........
};
take hash of this-> 16F2AAB2E87B51FAA4D0806D16CF2008


This is the same hash as (MD5(name)*PointA), thus the points are verified equal