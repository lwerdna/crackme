Solution to [HBK]'s "Indiana Jones and the Wizard of Oz"

Despite its silly name and appearance, this crackme contains a pretty
interesting puzzle. There's a 4x4 grid of buttons that all start active. An
active button may be pressed, deactivating it and some surrounding set of
buttons. The set of surrounding buttons that are deactivated is different for
each button. Half of the goal is to to deactivate all buttons. The other half
is to spell out "ABRACADABRA" while doing so, as each button is marked with a
letter.

Consider the button's being active or not as bits. Also, let's temporarily
relax the constraints on the puzzle by pretending that you could hit a button
at any time, whether it is active or not.

We can represent the state of the board by a vector of 16 bits; one per
button and rows concatenated together. Let 0 represent the button being
active, and 1 represent the button being inactive. The starting state is
thus 0000000000000000 and the goal state is 1111111111111111.

Label the buttons b_00..b_15 reading left to right, top to bottom. In the new
binary view, we can model the button's actions as bit operations.
Specifically, complementing a bit is XORing with 1. So, for example, when you
click button b_00 at [1,1], then {b_00, b_01, b_05} are complemented.
Equivalently, the board state is XORed with 1100010000000000. Now we are
prepared to write the action of every button:

button xor value
------ ---------
b_00   1100010000000000
b_01   0110001000000000
b_02   0111000000000000
b_03   0011000000000000
b_04   1000100010000000
b_05   0010010001000000
b_06   0010001101000000
b_07   0000001100000000
b_08   0000010011000000
b_09   0000000011000000
b_10   0000000001110010
b_11   0000001000110000
b_12   0000000010001000
b_13   0000000000100100
b_14   0000000000100111
b_15   0000000000010001

At this point, we're just curious WHICH buttons will be involved in a solution.
We want to know which buttons, when pressed, will have xor values that bring the
final state to the goal state.

This is a linear systems of equations with coefficients from GF(2). Let
c_i represent whether the i'th button is clicked or not. The columns now are
the button's xor values:

|1000100000000000| * |c_00| = |1|
|1110000000000000|   |c_01|   |1|
|0111011000000000|   |c_02|   |1|
|0011000000000000|   |c_03|   |1|
|0000100000000000|   |c_04|   |1|
|1000010010000000|   |c_05|   |1|
|0100001100010000|   |c_06|   |1|
|0000001100000000|   |c_07|   |1|
|0000100011001000|   |c_08|   |1|
|0000011011100000|   |c_09|   |1|
|0000000000110110|   |c_10|   |1|
|0000000000110001|   |c_11|   |1|
|0000000000001000|   |c_12|   |1|
|0000000000000110|   |c_13|   |1|
|0000000000100010|   |c_14|   |1|
|0000000000000011|   |c_15|   |1|
 ^^^
 |||
 ||+- etc...
 |+-- xor value for b_01
 +--- xor value for b_00

The matrix is not invertible, however. This means we my not be able to solve
for every possible target vector. Let's row reduce to see if we can solve
just for 1111111111111111. First, augment each row with the 1 from the
target vector. Then do the typical row cancellation ops. You get:

[1000000000000000 0]
[0100000000000000 1]
[0010000000000000 0]
[0001000000000000 1]
[0000100000000000 1]
[0000010001000000 0] <-- note
[0000001001000000 1] <-- note
[0000000101000000 0] <-- note
[0000000011000000 1] <-- note
[0000000000100000 1]
[0000000000010000 1]
[0000000000001000 1]
[0000000000000100 1]
[0000000000000010 0]
[0000000000000001 1]
[0000000000000000 0]

Not every variable is tied to a certain value, unfortunately. We have
some room for decisions. If you look at the rows marked "note", you'll
see that if we pick just c_09 then this decides {c_05, c_06, c_07, c_08}.
Thus I think we'll have two answers:

Choosing c_09=0: Choosing c_09=1:
---------------- ----------------
c_00 = 0         c_00 = 0
c_01 = 1         c_01 = 1
c_02 = 0         c_02 = 0
c_03 = 1         c_03 = 1
c_04 = 1         c_04 = 1
c_05 = 0         c_05 = 1
c_06 = 1         c_06 = 0
c_07 = 0         c_07 = 1
c_08 = 1         c_08 = 0
c_09 = 0         c_09 = 1 <-- choice of c_09
c_10 = 1         c_10 = 1
c_11 = 1         c_11 = 1
c_12 = 1         c_12 = 1
c_13 = 1         c_13 = 1
c_14 = 0         c_14 = 0
c_15 = 1         c_15 = 1

That means in the first solution, buttons {b_01, b_3, b_04, b_06, b_08,
b_10, b_11, b_12, b_13, b_15} must be chosen. And in the second solution,
buttons {b_01, b_03, b_04, b_05, b_07, b_09, b_10, b_11, b_12, b_13, b_15}
must be chosen.

Now we must face the relaxed requirement we made. We must order our button
presses because a button is only able to be pressed if it is on. The total
number of orderings of the first solution with 10 button presses is 10! =
3,628,800 and the second solution is 11! = 39,916,800 both of which are
feasible for brute forcing.

This is easy to model by the way. Consider the first solution. We can write
the button presses of our solution and mark the bit in the mask that is
required to be active:

b_01    0[1]1 0 0 0 1 0 0 0 0 0 0 0 0 0 
b_03    0 0 1[1]0 0 0 0 0 0 0 0 0 0 0 0 
b_04    1 0 0 0[1]0 0 0 1 0 0 0 0 0 0 0 
b_06    0 0 1 0 0 0[1]1 0 1 0 0 0 0 0 0 
b_08    0 0 0 0 0 1 0 0[1]1 0 0 0 0 0 0 
b_10    0 0 0 0 0 0 0 0 0 1[1]1 0 0 1 0 
b_11    0 0 0 0 0 0 1 0 0 0 1[1]0 0 0 0 
b_12    0 0 0 0 0 0 0 0 1 0 0 0[1]0 0 0 
b_13    0 0 0 0 0 0 0 0 0 0 1 0 0[1]0 0 
b_15    0 0 0 0 0 0 0 0 0 0 0 1 0 0 0[1]

As we choose which buttons to press, we apply the mask to the game state.
We can only choose a button if the current game state at that position is
a 0 (indicating that the button is still active).

An example of a bad sequence of button presses is b_01, b_03, b_04, b_06
because, when b_04 is hit, the current game state then has a 1 in position 6,
meaning that button b_06 is not active.

Ok let's finish this thing up. Since we must spell "ABRACADABRAAA" and b_08
has the letter "O", we can toss out the first solution and consider just
the second. Simply brute over all orderings (permutations) of the second
solution, tracking the state, ensuring that all moves are legal. If an
illegal move is encountered, go to the next ordering. See solver.py for the
python implementation of this.

The 132 possible keys sequences are:
[2,1] [1,4] [2,4] [3,3] [2,2] [4,4] [1,2] [3,4] [4,1] [3,2] [3,3] [4,2] [3,3]
[2,1] [1,4] [2,4] [3,4] [2,2] [4,2] [1,2] [3,3] [4,1] [3,2] [3,4] [4,4] [3,4]
[2,1] [1,4] [2,4] [4,2] [2,2] [3,4] [1,2] [3,3] [4,1] [3,2] [3,4] [4,4] [3,4]
[2,1] [1,4] [2,4] [4,4] [2,2] [3,3] [1,2] [3,4] [4,1] [3,2] [3,3] [4,2] [3,3]
[2,1] [1,4] [3,2] [3,3] [2,2] [4,2] [1,2] [3,3] [4,1] [2,4] [3,4] [3,3] [4,4]
[2,1] [1,4] [3,2] [3,3] [2,2] [4,2] [1,2] [3,3] [4,1] [2,4] [3,4] [4,4] [3,3]
[2,1] [1,4] [3,2] [3,3] [2,2] [4,4] [1,2] [3,4] [4,1] [2,4] [3,3] [4,2] [3,3]
[2,1] [1,4] [3,2] [3,4] [2,2] [4,2] [1,2] [3,3] [4,1] [2,4] [3,4] [4,4] [3,4]
[2,1] [1,4] [3,2] [3,4] [2,2] [4,4] [1,2] [3,4] [4,1] [2,4] [3,3] [3,4] [4,2]
[2,1] [1,4] [3,2] [3,4] [2,2] [4,4] [1,2] [3,4] [4,1] [2,4] [3,3] [4,2] [3,4]
[2,1] [1,4] [3,2] [4,2] [2,2] [3,4] [1,2] [3,3] [4,1] [2,4] [3,4] [4,4] [3,4]
[2,1] [1,4] [3,2] [4,4] [2,2] [3,3] [1,2] [3,4] [4,1] [2,4] [3,3] [4,2] [3,3]
[2,1] [4,1] [2,4] [3,3] [2,2] [4,4] [1,2] [3,4] [1,4] [3,2] [3,3] [4,2] [3,3]
[2,1] [4,1] [2,4] [3,4] [2,2] [4,2] [1,2] [3,3] [1,4] [3,2] [3,4] [4,4] [3,4]
[2,1] [4,1] [2,4] [4,2] [2,2] [3,4] [1,2] [3,3] [1,4] [3,2] [3,4] [4,4] [3,4]
[2,1] [4,1] [2,4] [4,4] [2,2] [3,3] [1,2] [3,4] [1,4] [3,2] [3,3] [4,2] [3,3]
[2,1] [4,1] [3,2] [3,3] [2,2] [4,2] [1,2] [3,3] [1,4] [2,4] [3,4] [3,3] [4,4]
[2,1] [4,1] [3,2] [3,3] [2,2] [4,2] [1,2] [3,3] [1,4] [2,4] [3,4] [4,4] [3,3]
[2,1] [4,1] [3,2] [3,3] [2,2] [4,4] [1,2] [3,4] [1,4] [2,4] [3,3] [4,2] [3,3]
[2,1] [4,1] [3,2] [3,4] [2,2] [4,2] [1,2] [3,3] [1,4] [2,4] [3,4] [4,4] [3,4]
[2,1] [4,1] [3,2] [3,4] [2,2] [4,4] [1,2] [3,4] [1,4] [2,4] [3,3] [3,4] [4,2]
[2,1] [4,1] [3,2] [3,4] [2,2] [4,4] [1,2] [3,4] [1,4] [2,4] [3,3] [4,2] [3,4]
[2,1] [4,1] [3,2] [4,2] [2,2] [3,4] [1,2] [3,3] [1,4] [2,4] [3,4] [4,4] [3,4]
[2,1] [4,1] [3,2] [4,4] [2,2] [3,3] [1,2] [3,4] [1,4] [2,4] [3,3] [4,2] [3,3]
[3,3] [1,4] [2,4] [2,1] [2,2] [4,4] [1,2] [3,4] [4,1] [3,2] [3,3] [4,2] [3,3]
[3,3] [1,4] [2,4] [4,4] [2,2] [2,1] [1,2] [3,4] [4,1] [3,2] [3,3] [4,2] [3,3]
[3,3] [1,4] [2,4] [4,4] [2,2] [3,4] [1,2] [2,1] [4,1] [3,2] [3,3] [4,2] [3,3]
[3,3] [4,1] [2,4] [2,1] [2,2] [4,4] [1,2] [3,4] [1,4] [3,2] [3,3] [4,2] [3,3]
[3,3] [4,1] [2,4] [4,4] [2,2] [2,1] [1,2] [3,4] [1,4] [3,2] [3,3] [4,2] [3,3]
[3,3] [4,1] [2,4] [4,4] [2,2] [3,4] [1,2] [2,1] [1,4] [3,2] [3,3] [4,2] [3,3]
[3,4] [1,4] [2,4] [2,1] [2,2] [4,2] [1,2] [3,3] [4,1] [3,2] [3,4] [4,4] [3,4]
[3,4] [1,4] [2,4] [4,2] [2,2] [2,1] [1,2] [3,3] [4,1] [3,2] [3,4] [4,4] [3,4]
[3,4] [1,4] [2,4] [4,2] [2,2] [3,3] [1,2] [2,1] [4,1] [3,2] [3,4] [4,4] [3,4]
[3,4] [1,4] [2,4] [4,2] [2,2] [3,3] [1,2] [3,4] [4,1] [3,2] [2,1] [4,4] [3,4]
[3,4] [1,4] [2,4] [4,2] [2,2] [3,3] [1,2] [3,4] [4,1] [3,2] [4,4] [2,1] [3,4]
[3,4] [1,4] [2,4] [4,2] [2,2] [3,3] [1,2] [3,4] [4,1] [3,2] [4,4] [3,4] [2,1]
[3,4] [1,4] [2,4] [4,4] [2,2] [3,4] [1,2] [3,3] [4,1] [3,2] [2,1] [3,4] [4,2]
[3,4] [1,4] [2,4] [4,4] [2,2] [3,4] [1,2] [3,3] [4,1] [3,2] [2,1] [4,2] [3,4]
[3,4] [1,4] [2,4] [4,4] [2,2] [3,4] [1,2] [3,3] [4,1] [3,2] [3,4] [2,1] [4,2]
[3,4] [1,4] [2,4] [4,4] [2,2] [3,4] [1,2] [3,3] [4,1] [3,2] [3,4] [4,2] [2,1]
[3,4] [1,4] [2,4] [4,4] [2,2] [3,4] [1,2] [3,3] [4,1] [3,2] [4,2] [2,1] [3,4]
[3,4] [1,4] [2,4] [4,4] [2,2] [3,4] [1,2] [3,3] [4,1] [3,2] [4,2] [3,4] [2,1]
[3,4] [1,4] [3,2] [2,1] [2,2] [4,2] [1,2] [3,3] [4,1] [2,4] [3,4] [4,4] [3,4]
[3,4] [1,4] [3,2] [2,1] [2,2] [4,4] [1,2] [3,4] [4,1] [2,4] [3,3] [3,4] [4,2]
[3,4] [1,4] [3,2] [2,1] [2,2] [4,4] [1,2] [3,4] [4,1] [2,4] [3,3] [4,2] [3,4]
[3,4] [1,4] [3,2] [4,2] [2,2] [2,1] [1,2] [3,3] [4,1] [2,4] [3,4] [4,4] [3,4]
[3,4] [1,4] [3,2] [4,2] [2,2] [3,3] [1,2] [2,1] [4,1] [2,4] [3,4] [4,4] [3,4]
[3,4] [1,4] [3,2] [4,2] [2,2] [3,3] [1,2] [3,4] [4,1] [2,4] [2,1] [4,4] [3,4]
[3,4] [1,4] [3,2] [4,2] [2,2] [3,3] [1,2] [3,4] [4,1] [2,4] [4,4] [2,1] [3,4]
[3,4] [1,4] [3,2] [4,2] [2,2] [3,3] [1,2] [3,4] [4,1] [2,4] [4,4] [3,4] [2,1]
[3,4] [1,4] [3,2] [4,4] [2,2] [2,1] [1,2] [3,4] [4,1] [2,4] [3,3] [3,4] [4,2]
[3,4] [1,4] [3,2] [4,4] [2,2] [2,1] [1,2] [3,4] [4,1] [2,4] [3,3] [4,2] [3,4]
[3,4] [1,4] [3,2] [4,4] [2,2] [3,4] [1,2] [2,1] [4,1] [2,4] [3,3] [3,4] [4,2]
[3,4] [1,4] [3,2] [4,4] [2,2] [3,4] [1,2] [2,1] [4,1] [2,4] [3,3] [4,2] [3,4]
[3,4] [1,4] [3,2] [4,4] [2,2] [3,4] [1,2] [3,3] [4,1] [2,4] [2,1] [3,4] [4,2]
[3,4] [1,4] [3,2] [4,4] [2,2] [3,4] [1,2] [3,3] [4,1] [2,4] [2,1] [4,2] [3,4]
[3,4] [1,4] [3,2] [4,4] [2,2] [3,4] [1,2] [3,3] [4,1] [2,4] [3,4] [2,1] [4,2]
[3,4] [1,4] [3,2] [4,4] [2,2] [3,4] [1,2] [3,3] [4,1] [2,4] [3,4] [4,2] [2,1]
[3,4] [1,4] [3,2] [4,4] [2,2] [3,4] [1,2] [3,3] [4,1] [2,4] [4,2] [2,1] [3,4]
[3,4] [1,4] [3,2] [4,4] [2,2] [3,4] [1,2] [3,3] [4,1] [2,4] [4,2] [3,4] [2,1]
[3,4] [4,1] [2,4] [2,1] [2,2] [4,2] [1,2] [3,3] [1,4] [3,2] [3,4] [4,4] [3,4]
[3,4] [4,1] [2,4] [4,2] [2,2] [2,1] [1,2] [3,3] [1,4] [3,2] [3,4] [4,4] [3,4]
[3,4] [4,1] [2,4] [4,2] [2,2] [3,3] [1,2] [2,1] [1,4] [3,2] [3,4] [4,4] [3,4]
[3,4] [4,1] [2,4] [4,2] [2,2] [3,3] [1,2] [3,4] [1,4] [3,2] [2,1] [4,4] [3,4]
[3,4] [4,1] [2,4] [4,2] [2,2] [3,3] [1,2] [3,4] [1,4] [3,2] [4,4] [2,1] [3,4]
[3,4] [4,1] [2,4] [4,2] [2,2] [3,3] [1,2] [3,4] [1,4] [3,2] [4,4] [3,4] [2,1]
[3,4] [4,1] [2,4] [4,4] [2,2] [3,4] [1,2] [3,3] [1,4] [3,2] [2,1] [3,4] [4,2]
[3,4] [4,1] [2,4] [4,4] [2,2] [3,4] [1,2] [3,3] [1,4] [3,2] [2,1] [4,2] [3,4]
[3,4] [4,1] [2,4] [4,4] [2,2] [3,4] [1,2] [3,3] [1,4] [3,2] [3,4] [2,1] [4,2]
[3,4] [4,1] [2,4] [4,4] [2,2] [3,4] [1,2] [3,3] [1,4] [3,2] [3,4] [4,2] [2,1]
[3,4] [4,1] [2,4] [4,4] [2,2] [3,4] [1,2] [3,3] [1,4] [3,2] [4,2] [2,1] [3,4]
[3,4] [4,1] [2,4] [4,4] [2,2] [3,4] [1,2] [3,3] [1,4] [3,2] [4,2] [3,4] [2,1]
[3,4] [4,1] [3,2] [2,1] [2,2] [4,2] [1,2] [3,3] [1,4] [2,4] [3,4] [4,4] [3,4]
[3,4] [4,1] [3,2] [2,1] [2,2] [4,4] [1,2] [3,4] [1,4] [2,4] [3,3] [3,4] [4,2]
[3,4] [4,1] [3,2] [2,1] [2,2] [4,4] [1,2] [3,4] [1,4] [2,4] [3,3] [4,2] [3,4]
[3,4] [4,1] [3,2] [4,2] [2,2] [2,1] [1,2] [3,3] [1,4] [2,4] [3,4] [4,4] [3,4]
[3,4] [4,1] [3,2] [4,2] [2,2] [3,3] [1,2] [2,1] [1,4] [2,4] [3,4] [4,4] [3,4]
[3,4] [4,1] [3,2] [4,2] [2,2] [3,3] [1,2] [3,4] [1,4] [2,4] [2,1] [4,4] [3,4]
[3,4] [4,1] [3,2] [4,2] [2,2] [3,3] [1,2] [3,4] [1,4] [2,4] [4,4] [2,1] [3,4]
[3,4] [4,1] [3,2] [4,2] [2,2] [3,3] [1,2] [3,4] [1,4] [2,4] [4,4] [3,4] [2,1]
[3,4] [4,1] [3,2] [4,4] [2,2] [2,1] [1,2] [3,4] [1,4] [2,4] [3,3] [3,4] [4,2]
[3,4] [4,1] [3,2] [4,4] [2,2] [2,1] [1,2] [3,4] [1,4] [2,4] [3,3] [4,2] [3,4]
[3,4] [4,1] [3,2] [4,4] [2,2] [3,4] [1,2] [2,1] [1,4] [2,4] [3,3] [3,4] [4,2]
[3,4] [4,1] [3,2] [4,4] [2,2] [3,4] [1,2] [2,1] [1,4] [2,4] [3,3] [4,2] [3,4]
[3,4] [4,1] [3,2] [4,4] [2,2] [3,4] [1,2] [3,3] [1,4] [2,4] [2,1] [3,4] [4,2]
[3,4] [4,1] [3,2] [4,4] [2,2] [3,4] [1,2] [3,3] [1,4] [2,4] [2,1] [4,2] [3,4]
[3,4] [4,1] [3,2] [4,4] [2,2] [3,4] [1,2] [3,3] [1,4] [2,4] [3,4] [2,1] [4,2]
[3,4] [4,1] [3,2] [4,4] [2,2] [3,4] [1,2] [3,3] [1,4] [2,4] [3,4] [4,2] [2,1]
[3,4] [4,1] [3,2] [4,4] [2,2] [3,4] [1,2] [3,3] [1,4] [2,4] [4,2] [2,1] [3,4]
[3,4] [4,1] [3,2] [4,4] [2,2] [3,4] [1,2] [3,3] [1,4] [2,4] [4,2] [3,4] [2,1]
[4,2] [1,4] [2,4] [2,1] [2,2] [3,4] [1,2] [3,3] [4,1] [3,2] [3,4] [4,4] [3,4]
[4,2] [1,4] [2,4] [3,4] [2,2] [2,1] [1,2] [3,3] [4,1] [3,2] [3,4] [4,4] [3,4]
[4,2] [1,4] [2,4] [3,4] [2,2] [3,3] [1,2] [2,1] [4,1] [3,2] [3,4] [4,4] [3,4]
[4,2] [1,4] [2,4] [3,4] [2,2] [3,3] [1,2] [3,4] [4,1] [3,2] [2,1] [4,4] [3,4]
[4,2] [1,4] [2,4] [3,4] [2,2] [3,3] [1,2] [3,4] [4,1] [3,2] [4,4] [2,1] [3,4]
[4,2] [1,4] [2,4] [3,4] [2,2] [3,3] [1,2] [3,4] [4,1] [3,2] [4,4] [3,4] [2,1]
[4,2] [1,4] [3,2] [2,1] [2,2] [3,4] [1,2] [3,3] [4,1] [2,4] [3,4] [4,4] [3,4]
[4,2] [1,4] [3,2] [3,4] [2,2] [2,1] [1,2] [3,3] [4,1] [2,4] [3,4] [4,4] [3,4]
[4,2] [1,4] [3,2] [3,4] [2,2] [3,3] [1,2] [2,1] [4,1] [2,4] [3,4] [4,4] [3,4]
[4,2] [1,4] [3,2] [3,4] [2,2] [3,3] [1,2] [3,4] [4,1] [2,4] [2,1] [4,4] [3,4]
[4,2] [1,4] [3,2] [3,4] [2,2] [3,3] [1,2] [3,4] [4,1] [2,4] [4,4] [2,1] [3,4]
[4,2] [1,4] [3,2] [3,4] [2,2] [3,3] [1,2] [3,4] [4,1] [2,4] [4,4] [3,4] [2,1]
[4,2] [4,1] [2,4] [2,1] [2,2] [3,4] [1,2] [3,3] [1,4] [3,2] [3,4] [4,4] [3,4]
[4,2] [4,1] [2,4] [3,4] [2,2] [2,1] [1,2] [3,3] [1,4] [3,2] [3,4] [4,4] [3,4]
[4,2] [4,1] [2,4] [3,4] [2,2] [3,3] [1,2] [2,1] [1,4] [3,2] [3,4] [4,4] [3,4]
[4,2] [4,1] [2,4] [3,4] [2,2] [3,3] [1,2] [3,4] [1,4] [3,2] [2,1] [4,4] [3,4]
[4,2] [4,1] [2,4] [3,4] [2,2] [3,3] [1,2] [3,4] [1,4] [3,2] [4,4] [2,1] [3,4]
[4,2] [4,1] [2,4] [3,4] [2,2] [3,3] [1,2] [3,4] [1,4] [3,2] [4,4] [3,4] [2,1]
[4,2] [4,1] [3,2] [2,1] [2,2] [3,4] [1,2] [3,3] [1,4] [2,4] [3,4] [4,4] [3,4]
[4,2] [4,1] [3,2] [3,4] [2,2] [2,1] [1,2] [3,3] [1,4] [2,4] [3,4] [4,4] [3,4]
[4,2] [4,1] [3,2] [3,4] [2,2] [3,3] [1,2] [2,1] [1,4] [2,4] [3,4] [4,4] [3,4]
[4,2] [4,1] [3,2] [3,4] [2,2] [3,3] [1,2] [3,4] [1,4] [2,4] [2,1] [4,4] [3,4]
[4,2] [4,1] [3,2] [3,4] [2,2] [3,3] [1,2] [3,4] [1,4] [2,4] [4,4] [2,1] [3,4]
[4,2] [4,1] [3,2] [3,4] [2,2] [3,3] [1,2] [3,4] [1,4] [2,4] [4,4] [3,4] [2,1]
[4,4] [1,4] [2,4] [2,1] [2,2] [3,3] [1,2] [3,4] [4,1] [3,2] [3,3] [4,2] [3,3]
[4,4] [1,4] [2,4] [3,3] [2,2] [2,1] [1,2] [3,4] [4,1] [3,2] [3,3] [4,2] [3,3]
[4,4] [1,4] [2,4] [3,3] [2,2] [3,4] [1,2] [2,1] [4,1] [3,2] [3,3] [4,2] [3,3]
[4,4] [1,4] [3,2] [2,1] [2,2] [3,3] [1,2] [3,4] [4,1] [2,4] [3,3] [4,2] [3,3]
[4,4] [1,4] [3,2] [3,3] [2,2] [2,1] [1,2] [3,4] [4,1] [2,4] [3,3] [4,2] [3,3]
[4,4] [1,4] [3,2] [3,3] [2,2] [3,4] [1,2] [2,1] [4,1] [2,4] [3,3] [4,2] [3,3]
[4,4] [1,4] [3,2] [3,3] [2,2] [3,4] [1,2] [3,3] [4,1] [2,4] [2,1] [4,2] [3,3]
[4,4] [1,4] [3,2] [3,3] [2,2] [3,4] [1,2] [3,3] [4,1] [2,4] [4,2] [2,1] [3,3]
[4,4] [1,4] [3,2] [3,3] [2,2] [3,4] [1,2] [3,3] [4,1] [2,4] [4,2] [3,3] [2,1]
[4,4] [4,1] [2,4] [2,1] [2,2] [3,3] [1,2] [3,4] [1,4] [3,2] [3,3] [4,2] [3,3]
[4,4] [4,1] [2,4] [3,3] [2,2] [2,1] [1,2] [3,4] [1,4] [3,2] [3,3] [4,2] [3,3]
[4,4] [4,1] [2,4] [3,3] [2,2] [3,4] [1,2] [2,1] [1,4] [3,2] [3,3] [4,2] [3,3]
[4,4] [4,1] [3,2] [2,1] [2,2] [3,3] [1,2] [3,4] [1,4] [2,4] [3,3] [4,2] [3,3]
[4,4] [4,1] [3,2] [3,3] [2,2] [2,1] [1,2] [3,4] [1,4] [2,4] [3,3] [4,2] [3,3]
[4,4] [4,1] [3,2] [3,3] [2,2] [3,4] [1,2] [2,1] [1,4] [2,4] [3,3] [4,2] [3,3]
[4,4] [4,1] [3,2] [3,3] [2,2] [3,4] [1,2] [3,3] [1,4] [2,4] [2,1] [4,2] [3,3]
[4,4] [4,1] [3,2] [3,3] [2,2] [3,4] [1,2] [3,3] [1,4] [2,4] [4,2] [2,1] [3,3]
[4,4] [4,1] [3,2] [3,3] [2,2] [3,4] [1,2] [3,3] [1,4] [2,4] [4,2] [3,3] [2,1]

Good job [HBK], you made a fun, creative crackme!

This crackme demonstrates again that behind the frontal view of some puzzles
there are common background mechanisms at work. See also Bublic's "Xor2Zero"
and Malfunction's "Digital Arithmetic" for other examples where this same
linear GF(2) system applies.

Greets to the active #crackmesde-ers: Dcoder and tamaroth!!

--
andrewl
apr06_2011
crackmes.de
