.text:004013BC         call    _shs_init
.text:004013C1         mov     al, [esp+96Ch+user]
.text:004013C8         add     esp, 4
.text:004013CB         test    al, al
.text:004013CD         jz      short loc_4013F4
.text:004013CF         lea     esi, [esp+968h+user]
.text:004013D6
.text:004013D6 loc_4013D6:                             ; CODE XREF: GetAndVerifySerial+2C2j
.text:004013D6         and     eax, 0FFh
.text:004013DB         lea     ecx, [esp+968h+sha_context]
.text:004013E2         push    eax
.text:004013E3         push    ecx
.text:004013E4         call    shs_process
.text:004013E9         mov     al, [esi+1]
.text:004013EC         add     esp, 8
.text:004013EF         inc     esi
.text:004013F0         test    al, al
.text:004013F2         jnz     short loc_4013D6
.text:004013F4
.text:004013F4 loc_4013F4:                             ; CODE XREF: GetAndVerifySerial+29Dj
.text:004013F4         lea     edx, [esp+968h+final_hash]
.text:004013F8         lea     eax, [esp+968h+sha_context]
.text:004013FF         push    edx
.text:00401400         push    eax
.text:00401401         call    _shs_hash               ;
.text:00401401                                         ;
.text:00401406         mov     ecx, [esp+970h+U]
.text:0040140A         lea     edx, [esp+970h+final_hash]
.text:0040140E         push    ecx
.text:0040140F         push    edx
.text:00401410         push    0Ah
.text:00401412         call    bytes_to_big            ; first ten bytes of sha1 result -> big num
.text:00401412                                         ;
.text:00401417         lea     eax, [esp+97Ch+strPartA]
.text:0040141E         push    eax
.text:0040141F         push    ebp
.text:00401420         call    _cinstr                 ;
.text:00401420                                         ;
.text:00401425         mov     esi, [esp+984h+partB]
.text:00401429         lea     ecx, [esp+984h+strPartB]
.text:00401430         push    ecx
.text:00401431         push    esi
.text:00401432         call    _cinstr                 ;
.text:00401432                                         ;
.text:00401437         push    offset aE97e36f9426708  ; "E97E36F9426708D10516A001FC358367B8ECBB7"...
.text:0040143C         push    ebx
.text:0040143D         call    _cinstr                 ;
.text:0040143D                                         ;
.text:00401442         mov     edi, [esp+994h+var_950]
.text:00401446         push    offset aD9bc54b68e7f0c  ; "D9BC54B68E7F0CC76BD6BEB333AA09CCE9162FA"...
.text:0040144B         push    edi
.text:0040144C         call    _cinstr                 ;
.text:0040144C                                         ;
.text:00401451         push    ebp
.text:00401452         push    ebp
.text:00401453         push    2
.text:00401455         push    ebp
.text:00401456         call    power
.text:0040145B         add     esp, 44h                ; compute PartA^2
.text:0040145B                                         ;
.text:0040145E         push    esi
.text:0040145F         push    esi
.text:00401460         push    2
.text:00401462         push    esi
.text:00401463         call    power                   ; compute PartB^2
.text:00401463                                         ;
.text:00401468         push    edi
.text:00401469         push    edi
.text:0040146A         call    negate                  ;
.text:0040146A                                         ;
.text:0040146F         push    ebp
.text:00401470         push    ebx
.text:00401471         push    ebx                     ; N
.text:00401472         push    ebp                     ; PartA^2
.text:00401473         push    esi                     ; PartB^2
.text:00401474         push    edi                     ; -C
.text:00401475         call    _mad                    ; ebp = -C * PartB^2 + PartA^2 (mod N)
.text:00401475                                         ;
.text:0040147A         push    ebp
.text:0040147B         push    ebx
.text:0040147C         push    ebp
.text:0040147D         call    _add                    ; result is negative, so they add an N to "normalize"
.text:0040147D                                         ; it (mod N)
.text:0040147D                                         ;
.text:00401482         push    ebx
.text:00401483         push    ebx
.text:00401484         push    ebp
.text:00401485         call    _divide                 ; this step is unnecessary - author is probably
.text:00401485                                         ; ensuring again the "normalcy" of the calculation
.text:00401485                                         ; (mod N)
.text:00401485                                         ;
.text:00401485                                         ;
.text:0040148A         mov     esi, [esp+9B0h+U]
.text:0040148E         add     esp, 48h
.text:00401491         push    ebx
.text:00401492         push    ebx
.text:00401493         push    esi
.text:00401494         call    _divide                 ; U = U (mod N)
.text:00401494                                         ;
.text:00401499         push    ebp
.text:0040149A         push    esi
.text:0040149B         call    _compare                ; -C * PartB^2 + PartA^2 (mod N)
.text:0040149B                                         ;
