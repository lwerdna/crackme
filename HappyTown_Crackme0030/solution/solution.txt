~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Keygenning HappyTown's Crackme_0030

 date: May 25th, 2009
tools: IDA, WinDBG, Cauchy CryptoSIG, PARI/GP
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

overview
--------
Your serial encodes the solution to a polynomial equation formed from your username.

This will discuss just the math - crackme has typical dialog UI and uses miracl - see
disassembly.txt for the disassembly.

algorithm
---------

Crackme computes a value u using your username:

    u = bignum( first_ten_bytes( sha1("<user>" "&PEdiy") ) ) (mod n)

There are some hardcoded values within the crackme:
        
    n = E97E36F9426708D10516A001FC358367B8ECBB7210388B971C886AA4A44845F1
      = p*q
    p = EB8D197C10BA775BA2A785085C44A0C3                                
    q = FDC35FF9D4A7BBCAD7577E99D8C8533B                                
    c = -D9BC54B68E7F0CC76BD6BEB333AA09CCE9162FA9DF22989EC049D5BCD34981FE
      = FC1E242B3E7FC09993FE14EC88B799ACFD68BC83115F2F85C3E94E7D0FEC3F3   (mod n)

Your serial number has form: "partA-partB" where partA and partB are base 16
representations of large numbers

The final check for goodboy:
    
    c * partB^2 + partA^2 = U (mod n)

solving
-------

This thing seems impossible to solve without bruteforce. You can't really adapt
a trial answer to get close to U. Like if you choose some X and Y at random and
test the output, you can't make a minor change in X or Y to lead the answer
closer to U. The squaring and modulus operations make the output difficult to
predict.

If someone can provide a better way to do this, please contact me. This is a
method kludged together after reading http://en.wikipedia.org/wiki/Quadratic_residue.

What I do is pretend that there are no squares at all. I just want to find two
variables A and B such that:

    C * A + B = U (mod n)

In other words, the substitution was made:

    A = X^2
    B = Y^2

To find this A and B, just choose A at random, and solve B = C - (A*B).

Then test if A and B are squares (mod n) using "Euler's Criterion". If they are,
then our A and B are found, and the last task we have is discovering X and Y,
which is finding the square root of A and B (mod n).

The problem is, the modulus n is non-prime, so this task is somewhat complicated.

We must find the square roots (mod p) and (mod q) then combine these solutions
for n = p*q using the Chinese remainder theorem.

Consider finding X from A:

Given A, we want to find X:

    X^2 = A (mod n)
    X^2 = A (mod p*q)

If p*q divides A-X^2 then surely p and q individually divide A-X^2:

    X^2 = A (mod p)
    X^2 = A (mod q)

Since p and q are congruent 3 (mod 4), Lagrange provides us a deterministic
formula for solving for X for either p or q:

    X = A^((p+1)/4) (mod p)
    X = A^((q+1)/4) (mod q)

But we don't want two separate answers, we want a single X that satisfies both
of these. Since GCD(p,q)=1, we qualify for use of the CRT to solve for X.

Identical steps are used to find Y given B.

Implementation is in keygen.cpp.

example serials
---------------

HappyTown   B2D901180BC85EE87981994513B123D6FDEEBA57341C971426C4CBE363CFEA70-A1FDE8CEE2CF80BBA0A129EBE25DE45C40B5F2CC52AC3E135ACB79FB225FC5A5
HappyTown   A39FD0DD5228E075F471406E8F0FCBDD29041CAEB42DE2A2EFBD982150D1AD07-DB5DBC0AF99DBA1AB61A7648DDC47F842EEFCFE6D3A64AF281C29A5CBB0CDDAB
crackmes.de D52F69ADCBF638D528A53A6657D5C33825971B39BC4C300BFB0D47487E8A1FDC-1B1C62BFA44AA644A9A9BE97043AD51E6CC117E648A3F5120B86871D5E061979
crackmes.de 987088CCB15EC69BE022FBD6E2DA75D85121B5175874987E758381DDC096B17B-DF473F9C0FC5C189E3143824B666BC0DEBCDDF04509C50B07C29AFA7E82F10F2

conclusion
----------

This was pretty fun - the equation was mystifying at first but as you read more and
more about quadratic residues, you can start crafting a plan.

Since about half of the numbers {0..P-1} are quadratic residues, and each of the
two {A,B} must be a quadratic residue of {p,q}, I estimated the loop that finds A and B
to execute around 16 times on average. I don't consider this a brute force solution, but
would really like to learn how to solve this without search.

Thanks to HappyTown!
Hello to E.L. and everyone at crackmes.de!

andrewl
crackmes.de








