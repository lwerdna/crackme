#keygen to Waganono's "Root Me #1"

from sys import argv
from struct import unpack
from whirlpool import Whirlpool

n=0xB2D0FD991BDDC9E137CE7E21F04B231A3899445CC8FA6C6364BBABBED816AE77AAFFE2FC6329F64B9A47EDAACEFF05D6EDA9
p=0xB37AD654A32D2D93F7D8FB81C999CEBB621B6C234666F3196B
q=0xFF0DBD838D1D7F92A972DA9857F35C71ABFD20F4DC00BAB63B

def legendre(a,p):
    if (a%p)==0:
        return 0
    if pow(a,(p-1)/2,p)==1:
        return 1
    return -1

def bignum_from_name(name):
    bn_name=0
    m=Whirlpool()
    m.update(name)
    for byte in m.digest():
        bn_name = (bn_name*256 + unpack("B", byte)[0]) % n
    while (legendre(bn_name,p)!=1) or (legendre(bn_name,q)!=1):
        bn_name=bn_name+1
    return bn_name

def decode_key(k):
    result=0
    lookup="QZM9GYLDR4BKS6PH7FX3TNW1A20J5C8VOEIU"
    for c in k:
        result=(result*36)+lookup.find(c)
    return result

def encode_key(k):
    result=''
    lookup="QZM9GYLDR4BKS6PH7FX3TNW1A20J5C8VOEIU"
    while k:
        result = lookup[k%36]+result
        k = k//36
    return result

def from_base257(a):
    result=0
    for n in reversed(a):
        result=257*result+n
    return result

def to_base257(n):
    result=[]
    while(n):
        quotient = n/257
        product = quotient*257
        result.append(n - product)
        n = quotient
    return result

def list_in_hex(l):
    for n in l:
        print '%X' % n,
    print ''

def xgcd(x,y):
    a0=1; b0=0
    a1=0; b1=1
    if x<0: 
         x *= -1
         a0 = -1
    if y<0: 
         y *= -1
         b1 = -1
    if x<y:
         x,y,a0,b0,a1,b1 = y,x,a1,b1,a0,b0
    while 1:
         times = x/y
         x -= times*y
         a0 -= times*a1
         b0 -= times*b1
         if x==0:
              break
         x,y,a0,b0,a1,b1 = y,x,a1,b1,a0,b0
    # x is 0 -> y is gcd
    return [y,a1,b1]

def solve_modular_sqrt(c,p,q):
    n = p*q
    # solve m^2 = c (mod n)
    # divide-and-conquer:
    # a^2 = c (mod p)
    # b^2 = c (mod q)
    # where n=pq and m has components a,b
    a = pow(c, (p+1)/4, p)
    b = pow(c, (q+1)/4, q)
    print "c: ", c
    print "a: ", a
    print "b: ", b
    # now we have two answers:
    # m = a (mod p)
    # m = b (mod q)
    # so:
    # m - a = kp
    # m - b = lq    (for some integers k, l)
    # so:
    # kp + a = lq + b
    # kp - lq = (b-a)
    # factor out a Bezout's identity:
    # kp + l(-q) = 1(b-a)
    # we can solve the kp + l(-q) = 1 and multiply by (b-a) to get k, l
    [gcd,k,l] = xgcd(p, n-q)
    print "k: ", k
    print "l: ", l
    k = (k * (b-a)) % n
    l = (l * (b-a)) % n
    # finally with k, l we can back-solve:
    # m - a = kp -> m = kp + a
    # m - b = lq -> m = lq + b
    m = (k*p + a) % n

    if m != ((l*q + b) % n):
        raise ValueError('universe glitch')
    if pow(m,2,n) != c:
        raise ValueError('universe glitch')
    return m

def matrix_transform(v):
    # this is inverse of matrix given in crackme - members are of F_257
    matrix=[184,141,209,101,93,75,101,109,145,22,51,79,120,20,220,9,28,139,73,127,14,37,89,4,183,207,50,9,250,91,136,77,131,123,113,121,101,201,225,230,85,41,133,92,155,249,252,36,95,147,15,178,98,225,127,254,9,138,223,82,126,161,10,51,104,160,141,108,54,181,175,205,245,59,157,186,197,96,126,197,13,173,184,51,241,227,25,120,119,70,79,28,39,32,105,188,197,71,33,215,116,115,15,152,119,219,202,125,104,186,10,4,171,183,208,48,134,92,154,101,210,165,157,221,248,128,141,212,21,51,8,158,180,100,180,85,224,141,61,83,54,173,209,242,74,206,4,151,169,59,75,225,226,142,178,158,76,88,72,26,1,137,158,117,146,73,205,121,228,136,165,128,141,59,30,150,165,224,52,225,25,194,218,16,5,163,70,228,101,110,183,181,237,217,114,143,246,162,186,168,183,147,130,231,70,204,126,198,155,47,28,6,205,99,252,255,104,66,105,187,79,63,151,91,34,0,135,114,63,160,200,62,88,160,101,185,184,52,22,233,149,13,198,181,97,89,86,32,205,90,240,47,66,151,187,192,98,185,54,248,249,17,37,45,87,152,161,122,5,171,201,241,64,127,88,140,170,131,218,36,121,16,147,238,37,38,5,196,129,187,97,150,142,54,201,14,251,120,0,56,11,116,229,155,241,201,230,178,168,45,92,175,238,179,111,205,157,248,184,254,118,114,207,78,82,194,145,223,17,57,178,91,253,49,0,222,41,38,99,81,254,158,23,88,37,106,87,103,133,228,60,112,125,153,159,188,79,229,256,51,166,243,101,27,143,89,185,157,133,50,164,89,130,180,221,233,229,85,148,173,219,163,167,15,147,13,125,196,194,221,224,5,123,71,46,224,141,81,178,211,220,36,35,112,179,217,194,34,149,232,153,68,103,241,101,14,25,22,158,42,231,58,101,136,94,106,233,160,120,104,210,191,32,255,85,193,166,153,209,99,194,67,27,166,162,132,156,78,205,104,98,36,101,152,28,119,74,25,216,74,43,52,163,163,162,171,136,110,197,141,72,80,59,79,20,173,55,169,130,142,1,193,164,52,112,166,199,145,122,211,84,10,35,43,248,171,148,168,66,9,105,243,22,94,95,89,177,160,186,152,13,212,103,223,91,238,183,81,35,220,227,120,83,240,227,126,47,230,108,101,66,5,48,96,73,140,94,226,144,66,153,11,140,31,234,117,203,147,129,255,1,115,222,45,74,49,62,133,174,203,48,159,100,47,23,209,220,104,139,143,244,146,105,182,101,24,238,113,51,253,41,250,63,134,167,170,142,25,190,226,100,243,217,191,22,253,250,207,205,144,179,47,128,35,244,192,218,179,69,85,135,26,209,88,18,224,199,10,58,163,78,215,112,243,256,256,185,72,180,16,180,83,16,153,44,16,207,34,143,212,204,190,198,207,207,10,53,107,143,217,241,216,252,145,194,20,189,160,237,166,208,99,251,161,83,122,185,118,24,208,204,194,202,199,251,22,106,84,233,101,42,41,57,162,198,51,153,58,30,51,126,93,210,53,102,50,96,28,154,189,18,119,162,146,153,19,139,140,7,176,225,209,25,97,68,32,179,98,55,0,15,25,74,90,211,12,12,167,141,236,211,53,56,220,24,68,95,208,179,64,191,11,147,111,215,191,73,85,141,100,236,112,144,2,177,147,211,217,157,211,162,57,31,195,35,105,236,206,195,18,125,147,208,27,251,163,170,77,175,162,220,172,188,111,120,5,179,11,105,27,146,256,25,14,65,141,154,223,222,140,31,94,7,40,180,123,211,59,119,236,109,229,123,56,11,0,232,115,122,19,12,55,245,215,13,97,6,3,184,232,254,22,0,53,51,169,214,16,90,127,104,55,3,152,164,70,247,109,119,108,53,48,34,89,39,172,109,221,231,179,15,0,173,150,30,215,136,194,242,175,53,225,40,138,191,236,78,8,24,25,165,250,98,88,31,4,178,160,38,184,0,70,256,230,193,132,244,153,147,56,249,235,150,210,76,16,200,212,165,60,0,6,126,53,3,173,169,206,193,184,169,138,9,60,48,136,62,8,122,103,195,164,151,223,133,160,30,27,245,155,180,230,85,182,89,210,130,129,96,51,88,114,185,31,120,92,229,186,92,69,146,208,18,164,48,217,250,14,246,190,245,206,98,71,216,46,206,18,88,6,179,40,245,166,219,108,238,82,8,237,24,189,181,141,124,70,28,140,181,236,250,146,67,221,160,178,52,126,101,102,5,32,97,11,210,153,33,112,256,39,56,131,94,205,221,82,239,27,11,199,175,70,2,170,9,122,10,32,81,219,47,36,101,150,106,127,55,242,145,157,110,118,169,146,190,239,148,128,141,152,164,217,89,138,17,201,100,179,53,73,198,68,21,117,69,238,202,232,203,94,184,175,80,174,202,169,47,85,58,128,245,36,13,192,248,30,99,237,27,146,120,69,105,18,77,157,151,250,155,143,72,40,177,92,248,134,252,142,113,72,176,181,41,190,85,68,146,227,254,53,165,158,249,122,173,37,244,240,53,0,156,190,250,59,178,124,235,4,18,120,164,255,246,45,53,157,90,158,211,165,34,242,54,116,138,55,153,208,202,165,56,255,57,124,91,98,41,201,53,178,219,225,54,8,4,103,129,103,203,179,224,95,140,58,135,159,129,158,75,231,0,39,151,146,211,23,15,101,191,237,95,2,160,179,44,145,156,183,149,243,110,33,106,171,237,98,165,172,121,55,25,157,48,116,69,59,195,192,71,141,163,31,39,73,181,195,229,103,218,74,238,94,153,141,119,247,194,30,55,255,181,241,126,8,144,211,190,200,168,129,147,226,159,104,99,20,234,210,26,84,199,140,140,174,189,95,110,15,200,169,52,82,40,246,107,55,87,243,120,256,176,146,52,82,184,236,81,54,120,1,117,71,143,46,3,229,217,224,216,130,213,206,190,122,113,231,43,249,199,183,1,35,216,52,72,14,89,35,72,17,22,161,45,140,31,144,241,61,237,72,38,84,232,37,195,7,231,166,118,106,241,60,74,2,140,236,126,33,75,243,174,43,158,9,177,54,256,69,76,140,189,14,210,59,61,53,250,30,58,40,74,106,140,181,234,192,213,21,200,121,29,199,135,46,105,56,26,214,170,90,222,24,4,150,85,15,224,253,32,53,87,1,110,249,226,72,140,151,250,183,228,103,11,46,183,25,26,140,128,90,134,213,30,236,188,42,126,107,29,151,86,256,117,212,172,153,203,71,119,152,232,1,213,192,246,123,7,143,86,127,248,225,44,157,75,99,141,96,13,104,247,138,124,79,71,251,148,28,9,42,256,123,68,16,38,73,184,126,204,227,27,143,82,137,81,135,14,106,187,234,157,37,198,189,227,41,48,185,105,20,156,39,197,140,231,176,129,183,144,107,64,24,217,133,255,137,113,38,1,74,164,45,253,18,224,158,130,149,36,13,119,161,78,82,74,82,110,176,121,30,26,226,204,255,254,242,148,123,114,23,219,10,70,106,131,106,102,126,90,136,208,158,23,96,190,7,70,5,36,183,39,174,135,124,219,253,72,238,142,84,191,182,152,113,61,153,69,229,66,141,125,244,61,208,213,153,12,202,185,215,105,161,222,65,245,31,205,20,3,76,172,72,214,54,123,38,140,81,213,117,33,72,140,139,17,252,10,134,169,60,148,130,178,18,62,56,205,229,228,248,64,81,167,13,94,232,217,80,70,27,32,180,85,110,13,106,24,13,35,1,143,152,192,47,172,207,146,256,38,102,192,186,93,0,128,228,110,132,85,220,1,226,66,205,187,198,7,84,46,223,183,171,254,93,7,29,139,250,107,86,223,243,80,155,89,182,94,179,180,41,255,178,30,158,10,148,5,53,126,75,136,234,227,200,79,169,254,54,33,12,150,241,72,194,15,169,251,11,86,219,230,45,236,30,198,145,76,208,238,104,30,160,129,237,98,158,158,38,87,88,25,134,71,143,229,226,255,59,78,217,79,101,22,231,180,109,240,132,174,246,62,48,81,10,19,139,243,188,2,117,18,254,153,100,71,200,22,43,164,56,248,171,172,31,158,48,50,138,104,175,240,130,168,187,127,245,98,83,89,200,151,140,23,76,106,143,79,71,136,150,241,89,196,26,133,60,15,112,161,245,78,142,6,101,170,231,63,198,151,28,206,112,165,103,66,235,11,168,73,168,229,66,197,253,147,243,0,25,20,103,83,181,164,5,145,85,141,47,161,1,77,2,52,196,255,181,129,137,81,216,155,110,106,150,132,80,36,2,159,28,132,192,182,189,187,247,132,71,128,205,175,154,72,49,16,71,18,103,101,50,115,48,164,253,217,46,49,91,36,89,40,135,15,88,244,183,231,87,214,217,65,90,200,173,103,52,79,198,6,42,220,7,6,67,239,101,200,21,182,156,173,136,103,135,225,13,149,80,203,182,163,6,139,157,18,35,248,134,86,6,7,123,92,111,158,124,105,110,224,80,46,66,3,36,229,32,193,193,186,195,200,251,48,221,252,160,18,32,85,200,14,24,17,57,137,239,69,40,58,89,253,8,131,118,208,251,118,27,65,145,23,109,30,110,135,204,85,179,54,173,171,166,213,100,98,10,240,52,12,66,13,76,223,232,87,149,236,98,244,106,43,224,178,102,199,27,50,45,5,103,107,22,219,101,43,208,217,123,140,143,95,107,35,212,20,125,217,180,35,41,250,26,256,180,223,147,169,69,172,107,3,72,158,79,200,111,228,96,202,48,115,180,142,152,256,241,155,97,218,187,65,42,176,209,222,246,178,178,75,90,190,229,255,224,220,15,233,62,237,110,241,168,96,60,28,109,252,157,211,62,151,210,69,183,134,232,46,131,91,13,68,140,191,175,66,77,204,181,233,141,144,42,210,22,179,86,81,170,216,58,123,40,79,30,117,86,178,213,191,19,77,54,130,6,187,96,172,176,182,221,79,255,64,25,59,246,84,249,117,30,142,234,140,43,202,178,116,88,7,231,46,160,9,189,148,115,252,102,255,0,39,138,218,89,97,150,125,123,218,226,22,202,90,160,237,177,98,66,166,29,75,209,142,214,142,223,76,189,251,161,113,240,156,119,37,199,98,82,31,126,157,157,38,137,207,44,63,110,83,203,212,137,120,101,82,180,42,41,255,110,217,11,221,118,215,218,172,111,187,129,125,54,12,223,135,204,175,31,239,232,188,64,170,93,63,86,253,171,6,229,49,93,73,235,170,50,171,139,92,252,95,198,245,212,169,223,155,53,20,25,116,155,68,114,133,188,197,87,84,175,44,31,109,47,29,35,120,150,171,131,241,16,125,224,219,222,24,225,118,154,239,22,205,213,112,126,17,97,94,149,97,90,214,109,42,199,218,100,229,233,236,119,3,170,220,81,188,67,29,176,102,32,200,199,147,232,175,14,219,58,204,158,166,214,241,168,24,202,23,206,33,124,112,13,77,164,143,195,251,138,153,205,58,101,114,207,184,19,251,27,228,169,91,141,144,156,187,149,93,27,0,204,191,148,90,139,213,6,132,178,188,245,185,174,189,56,235,195,116,184,195,9,133,230,126,145,205,158,121,184]

    if len(matrix) != 2500:
        raise ValueError('matrix fucked up')
    mproduct = []
    for h in range(50):
        sum = 0
        for i in range(50):
            sum = sum + (v[i] * matrix[50*h+i])
        mproduct.append(sum % 257)
    return mproduct


#------------------------------------------------------------------------------
# main()
#------------------------------------------------------------------------------
name = 'andrewl'
if len(argv) > 1:
    name = argv[1]

# ciphertext
c = bignum_from_name(name)
# plaintext message
m = solve_modular_sqrt(c,p,q)
print "m: %X" % m

# could do q here instead
temp = (p<<400)|m
print "p|m: %X" % temp

# matrix transformation
temp = to_base257(temp)
list_in_hex(temp)
print '',
temp = matrix_transform(temp[0:50]) + temp[50:]
list_in_hex(temp)
print '',

key = from_base257(temp)
print 'bignum form: %X' % key

print "key as bignum: %X" % key

print '-------------------------------------'
print 'name: ',name
print ' key: ', encode_key(key)


