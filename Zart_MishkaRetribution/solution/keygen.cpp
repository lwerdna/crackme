// Keygen to Zart's "Mishka Retribution" 
// 2008 andrewl

#define _CRT_SECURE_NO_DEPRECATE 1

//OS
#include <windows.h>
#pragma comment(lib, "user32.lib")

//CRT
#include <stdio.h>
#include <time.h>
#include <conio.h>

// globals
char alphabet[] = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789";

// functions
void derive_40194D(UCHAR b0, UCHAR b1, PUCHAR b2, PULONG ul0)
{
    unsigned char unk_41AD58[] =
    {
        0x00, 0x00, 0x00, 0x00, 0x96, 0x30, 0x07, 0x77, // .....0.w
        0x2C, 0x61, 0x0E, 0xEE, 0xBA, 0x51, 0x09, 0x99, // ,a...Q..
        0x19, 0xC4, 0x6D, 0x07, 0x8F, 0xF4, 0x6A, 0x70, // ..m...jp
        0x35, 0xA5, 0x63, 0xE9, 0xA3, 0x95, 0x64, 0x9E, // 5.c...d.
        0x32, 0x88, 0xDB, 0x0E, 0xA4, 0xB8, 0xDC, 0x79, // 2......y
        0x1E, 0xE9, 0xD5, 0xE0, 0x88, 0xD9, 0xD2, 0x97, // ........
        0x2B, 0x4C, 0xB6, 0x09, 0xBD, 0x7C, 0xB1, 0x7E, // +L...|.~
        0x07, 0x2D, 0xB8, 0xE7, 0x91, 0x1D, 0xBF, 0x90, // .-......
        0x64, 0x10, 0xB7, 0x1D, 0xF2, 0x20, 0xB0, 0x6A, // d.... .j
        0x48, 0x71, 0xB9, 0xF3, 0xDE, 0x41, 0xBE, 0x84, // Hq...A..
        0x7D, 0xD4, 0xDA, 0x1A, 0xEB, 0xE4, 0xDD, 0x6D, // }......m
        0x51, 0xB5, 0xD4, 0xF4, 0xC7, 0x85, 0xD3, 0x83, // Q.......
        0x56, 0x98, 0x6C, 0x13, 0xC0, 0xA8, 0x6B, 0x64, // V.l...kd
        0x7A, 0xF9, 0x62, 0xFD, 0xEC, 0xC9, 0x65, 0x8A, // z.b...e.
        0x4F, 0x5C, 0x01, 0x14, 0xD9, 0x6C, 0x06, 0x63, // O\...l.c
        0x63, 0x3D, 0x0F, 0xFA, 0xF5, 0x0D, 0x08, 0x8D, // c=......
        0xC8, 0x20, 0x6E, 0x3B, 0x5E, 0x10, 0x69, 0x4C, // . n;^.iL
        0xE4, 0x41, 0x60, 0xD5, 0x72, 0x71, 0x67, 0xA2, // .A`.rqg.
        0xD1, 0xE4, 0x03, 0x3C, 0x47, 0xD4, 0x04, 0x4B, // ...<G..K
        0xFD, 0x85, 0x0D, 0xD2, 0x6B, 0xB5, 0x0A, 0xA5, // ....k...
        0xFA, 0xA8, 0xB5, 0x35, 0x6C, 0x98, 0xB2, 0x42, // ...5l..B
        0xD6, 0xC9, 0xBB, 0xDB, 0x40, 0xF9, 0xBC, 0xAC, // ....@...
        0xE3, 0x6C, 0xD8, 0x32, 0x75, 0x5C, 0xDF, 0x45, // .l.2u\.E
        0xCF, 0x0D, 0xD6, 0xDC, 0x59, 0x3D, 0xD1, 0xAB, // ....Y=..
        0xAC, 0x30, 0xD9, 0x26, 0x3A, 0x00, 0xDE, 0x51, // .0.&:..Q
        0x80, 0x51, 0xD7, 0xC8, 0x16, 0x61, 0xD0, 0xBF, // .Q...a..
        0xB5, 0xF4, 0xB4, 0x21, 0x23, 0xC4, 0xB3, 0x56, // ...!#..V
        0x99, 0x95, 0xBA, 0xCF, 0x0F, 0xA5, 0xBD, 0xB8, // ........
        0x9E, 0xB8, 0x02, 0x28, 0x08, 0x88, 0x05, 0x5F, // ...(..._
        0xB2, 0xD9, 0x0C, 0xC6, 0x24, 0xE9, 0x0B, 0xB1, // ....$...
        0x87, 0x7C, 0x6F, 0x2F, 0x11, 0x4C, 0x68, 0x58, // .|o/.LhX
        0xAB, 0x1D, 0x61, 0xC1, 0x3D, 0x2D, 0x66, 0xB6, // ..a.=-f.
        0x90, 0x41, 0xDC, 0x76, 0x06, 0x71, 0xDB, 0x01, // .A.v.q..
        0xBC, 0x20, 0xD2, 0x98, 0x2A, 0x10, 0xD5, 0xEF, // . ..*...
        0x89, 0x85, 0xB1, 0x71, 0x1F, 0xB5, 0xB6, 0x06, // ...q....
        0xA5, 0xE4, 0xBF, 0x9F, 0x33, 0xD4, 0xB8, 0xE8, // ....3...
        0xA2, 0xC9, 0x07, 0x78, 0x34, 0xF9, 0x00, 0x0F, // ...x4...
        0x8E, 0xA8, 0x09, 0x96, 0x18, 0x98, 0x0E, 0xE1, // ........
        0xBB, 0x0D, 0x6A, 0x7F, 0x2D, 0x3D, 0x6D, 0x08, // ..j.-=m.
        0x97, 0x6C, 0x64, 0x91, 0x01, 0x5C, 0x63, 0xE6, // .ld..\c.
        0xF4, 0x51, 0x6B, 0x6B, 0x62, 0x61, 0x6C, 0x1C, // .Qkkbal.
        0xD8, 0x30, 0x65, 0x85, 0x4E, 0x00, 0x62, 0xF2, // .0e.N.b.
        0xED, 0x95, 0x06, 0x6C, 0x7B, 0xA5, 0x01, 0x1B, // ...l{...
        0xC1, 0xF4, 0x08, 0x82, 0x57, 0xC4, 0x0F, 0xF5, // ....W...
        0xC6, 0xD9, 0xB0, 0x65, 0x50, 0xE9, 0xB7, 0x12, // ...eP...
        0xEA, 0xB8, 0xBE, 0x8B, 0x7C, 0x88, 0xB9, 0xFC, // ....|...
        0xDF, 0x1D, 0xDD, 0x62, 0x49, 0x2D, 0xDA, 0x15, // ...bI-..
        0xF3, 0x7C, 0xD3, 0x8C, 0x65, 0x4C, 0xD4, 0xFB, // .|..eL..
        0x58, 0x61, 0xB2, 0x4D, 0xCE, 0x51, 0xB5, 0x3A, // Xa.M.Q.:
        0x74, 0x00, 0xBC, 0xA3, 0xE2, 0x30, 0xBB, 0xD4, // t....0..
        0x41, 0xA5, 0xDF, 0x4A, 0xD7, 0x95, 0xD8, 0x3D, // A..J...=
        0x6D, 0xC4, 0xD1, 0xA4, 0xFB, 0xF4, 0xD6, 0xD3, // m.......
        0x6A, 0xE9, 0x69, 0x43, 0xFC, 0xD9, 0x6E, 0x34, // j.iC..n4
        0x46, 0x88, 0x67, 0xAD, 0xD0, 0xB8, 0x60, 0xDA, // F.g...`.
        0x73, 0x2D, 0x04, 0x44, 0xE5, 0x1D, 0x03, 0x33, // s-.D...3
        0x5F, 0x4C, 0x0A, 0xAA, 0xC9, 0x7C, 0x0D, 0xDD, // _L...|..
        0x3C, 0x71, 0x05, 0x50, 0xAA, 0x41, 0x02, 0x27, // <q.P.A.'
        0x10, 0x10, 0x0B, 0xBE, 0x86, 0x20, 0x0C, 0xC9, // ..... ..
        0x25, 0xB5, 0x68, 0x57, 0xB3, 0x85, 0x6F, 0x20, // %.hW..o 
        0x09, 0xD4, 0x66, 0xB9, 0x9F, 0xE4, 0x61, 0xCE, // ..f...a.
        0x0E, 0xF9, 0xDE, 0x5E, 0x98, 0xC9, 0xD9, 0x29, // ...^...)
        0x22, 0x98, 0xD0, 0xB0, 0xB4, 0xA8, 0xD7, 0xC7, // ".......
        0x17, 0x3D, 0xB3, 0x59, 0x81, 0x0D, 0xB4, 0x2E, // .=.Y....
        0x3B, 0x5C, 0xBD, 0xB7, 0xAD, 0x6C, 0xBA, 0xC0, // ;\...l..
        0x20, 0x83, 0xB8, 0xED, 0xB6, 0xB3, 0xBF, 0x9A, //  .......
        0x0C, 0xE2, 0xB6, 0x03, 0x9A, 0xD2, 0xB1, 0x74, // .......t
        0x39, 0x47, 0xD5, 0xEA, 0xAF, 0x77, 0xD2, 0x9D, // 9G...w..
        0x15, 0x26, 0xDB, 0x04, 0x83, 0x16, 0xDC, 0x73, // .&.....s
        0x12, 0x0B, 0x63, 0xE3, 0x84, 0x3B, 0x64, 0x94, // ..c..;d.
        0x3E, 0x6A, 0x6D, 0x0D, 0xA8, 0x5A, 0x6A, 0x7A, // >jm..Zjz
        0x0B, 0xCF, 0x0E, 0xE4, 0x9D, 0xFF, 0x09, 0x93, // ........
        0x27, 0xAE, 0x00, 0x0A, 0xB1, 0x9E, 0x07, 0x7D, // '......}
        0x44, 0x93, 0x0F, 0xF0, 0xD2, 0xA3, 0x08, 0x87, // D.......
        0x68, 0xF2, 0x01, 0x1E, 0xFE, 0xC2, 0x06, 0x69, // h......i
        0x5D, 0x57, 0x62, 0xF7, 0xCB, 0x67, 0x65, 0x80, // ]Wb..ge.
        0x71, 0x36, 0x6C, 0x19, 0xE7, 0x06, 0x6B, 0x6E, // q6l...kn
        0x76, 0x1B, 0xD4, 0xFE, 0xE0, 0x2B, 0xD3, 0x89, // v....+..
        0x5A, 0x7A, 0xDA, 0x10, 0xCC, 0x4A, 0xDD, 0x67, // Zz...J.g
        0x6F, 0xDF, 0xB9, 0xF9, 0xF9, 0xEF, 0xBE, 0x8E, // o.......
        0x43, 0xBE, 0xB7, 0x17, 0xD5, 0x8E, 0xB0, 0x60, // C......`
        0xE8, 0xA3, 0xD6, 0xD6, 0x7E, 0x93, 0xD1, 0xA1, // ....~...
        0xC4, 0xC2, 0xD8, 0x38, 0x52, 0xF2, 0xDF, 0x4F, // ...8R..O
        0xF1, 0x67, 0xBB, 0xD1, 0x67, 0x57, 0xBC, 0xA6, // .g..gW..
        0xDD, 0x06, 0xB5, 0x3F, 0x4B, 0x36, 0xB2, 0x48, // ...?K6.H
        0xDA, 0x2B, 0x0D, 0xD8, 0x4C, 0x1B, 0x0A, 0xAF, // .+..L...
        0xF6, 0x4A, 0x03, 0x36, 0x60, 0x7A, 0x04, 0x41, // .J.6`z.A
        0xC3, 0xEF, 0x60, 0xDF, 0x55, 0xDF, 0x67, 0xA8, // ..`.U.g.
        0xEF, 0x8E, 0x6E, 0x31, 0x79, 0xBE, 0x69, 0x46, // ..n1y.iF
        0x8C, 0xB3, 0x61, 0xCB, 0x1A, 0x83, 0x66, 0xBC, // ..a...f.
        0xA0, 0xD2, 0x6F, 0x25, 0x36, 0xE2, 0x68, 0x52, // ..o%6.hR
        0x95, 0x77, 0x0C, 0xCC, 0x03, 0x47, 0x0B, 0xBB, // .w...G..
        0xB9, 0x16, 0x02, 0x22, 0x2F, 0x26, 0x05, 0x55, // ..."/&.U
        0xBE, 0x3B, 0xBA, 0xC5, 0x28, 0x0B, 0xBD, 0xB2, // .;..(...
        0x92, 0x5A, 0xB4, 0x2B, 0x04, 0x6A, 0xB3, 0x5C, // .Z.+.j..
        0xA7, 0xFF, 0xD7, 0xC2, 0x31, 0xCF, 0xD0, 0xB5, // ....1...
        0x8B, 0x9E, 0xD9, 0x2C, 0x1D, 0xAE, 0xDE, 0x5B, // ...,...[
        0xB0, 0xC2, 0x64, 0x9B, 0x26, 0xF2, 0x63, 0xEC, // ..d.&.c.
        0x9C, 0xA3, 0x6A, 0x75, 0x0A, 0x93, 0x6D, 0x02, // ..ju..m.
        0xA9, 0x06, 0x09, 0x9C, 0x3F, 0x36, 0x0E, 0xEB, // ....?6..
        0x85, 0x67, 0x07, 0x72, 0x13, 0x57, 0x00, 0x05, // .g.r.W..
        0x82, 0x4A, 0xBF, 0x95, 0x14, 0x7A, 0xB8, 0xE2, // .J...z..
        0xAE, 0x2B, 0xB1, 0x7B, 0x38, 0x1B, 0xB6, 0x0C, // .+.{8...
        0x9B, 0x8E, 0xD2, 0x92, 0x0D, 0xBE, 0xD5, 0xE5, // ........
        0xB7, 0xEF, 0xDC, 0x7C, 0x21, 0xDF, 0xDB, 0x0B, // ...|!...
        0xD4, 0xD2, 0xD3, 0x86, 0x42, 0xE2, 0xD4, 0xF1, // ....B...
        0xF8, 0xB3, 0xDD, 0x68, 0x6E, 0x83, 0xDA, 0x1F, // ...hn...
        0xCD, 0x16, 0xBE, 0x81, 0x5B, 0x26, 0xB9, 0xF6, // ....[&..
        0xE1, 0x77, 0xB0, 0x6F, 0x77, 0x47, 0xB7, 0x18, // .w.owG..
        0xE6, 0x5A, 0x08, 0x88, 0x70, 0x6A, 0x0F, 0xFF, // .Z..pj..
        0xCA, 0x3B, 0x06, 0x66, 0x5C, 0x0B, 0x01, 0x11, // .;.f\...
        0xFF, 0x9E, 0x65, 0x8F, 0x69, 0xAE, 0x62, 0xF8, // ..e.i.b.
        0xD3, 0xFF, 0x6B, 0x61, 0x45, 0xCF, 0x6C, 0x16, // ..kaE.l.
        0x78, 0xE2, 0x0A, 0xA0, 0xEE, 0xD2, 0x0D, 0xD7, // x.......
        0x54, 0x83, 0x04, 0x4E, 0xC2, 0xB3, 0x03, 0x39, // T..N...9
        0x61, 0x26, 0x67, 0xA7, 0xF7, 0x16, 0x60, 0xD0, // a&g...`.
        0x4D, 0x47, 0x69, 0x49, 0xDB, 0x77, 0x6E, 0x3E, // MGiI.wn>
        0x4A, 0x6A, 0xD1, 0xAE, 0xDC, 0x5A, 0xD6, 0xD9, // Jj...Z..
        0x66, 0x0B, 0xDF, 0x40, 0xF0, 0x3B, 0xD8, 0x37, // f..@.;.7
        0x53, 0xAE, 0xBC, 0xA9, 0xC5, 0x9E, 0xBB, 0xDE, // S.......
        0x7F, 0xCF, 0xB2, 0x47, 0xE9, 0xFF, 0xB5, 0x30, // ...G...0
        0x1C, 0xF2, 0xBD, 0xBD, 0x8A, 0xC2, 0xBA, 0xCA, // ........
        0x30, 0x93, 0xB3, 0x53, 0xA6, 0xA3, 0xB4, 0x24, // 0..S...$
        0x05, 0x36, 0xD0, 0xBA, 0x93, 0x06, 0xD7, 0xCD, // .6......
        0x29, 0x57, 0xDE, 0x54, 0xBF, 0x67, 0xD9, 0x23, // )W.T.g.#
        0x2E, 0x7A, 0x66, 0xB3, 0xB8, 0x4A, 0x61, 0xC4, // .zf..Ja.
        0x02, 0x1B, 0x68, 0x5D, 0x94, 0x2B, 0x6F, 0x2A, // ..h].+o*
        0x37, 0xBE, 0x0B, 0xB4, 0xA1, 0x8E, 0x0C, 0xC3, // 7.......
        0x1B, 0xDF, 0x05, 0x5A, 0x8D, 0xEF, 0x02, 0x2D  // ...Z...-
    };

    char aZartTeamResu_1[] =
    {
        0x7A, 0x61, 0x72, 0x74, 0x20, 0x2F, 0x2F, 0x20, // zart // 
        0x54, 0x45, 0x41, 0x4D, 0x20, 0x52, 0x45, 0x53, // TEAM RES
        0x55, 0x52, 0x52, 0x45, 0x43, 0x54, 0x69, 0x4F, // URRECTiO
        0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // N.......
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
        0x00, 0x00, 0xDE, 0xAD, 0xBE, 0xEF, 0x61, 0x92, // ......a.
        0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // A.......
        0x00, 0x00, 0x6B, 0x65, 0x79, 0x67, 0x65, 0x6E, // ..keygen
        0x6D, 0x65, 0x2D                                // me-     
    };
    
    unsigned long answer;

    aZartTeamResu_1[0x2E] = b0;
    aZartTeamResu_1[0x2F] = b1;
    *b2 = aZartTeamResu_1[0x30] = rand()%0xFF; //third_byte;

    __asm
    {
                    pusha
      loc_0040196C: mov     edx,0FFFFFFFFh
      loc_00401971: mov     eax,43h
      loc_00401976: xor     ebx,ebx
      loc_0040194D: push    ebx
      loc_00401979: lea     ecx,[aZartTeamResu_1]
      loc_0040197F: movzx   ecx,byte ptr [ebx+ecx]
      loc_00401983: xor     ecx,edx
      loc_00401985: and     ecx,0FFh
      loc_0040198B: shl     ecx,2           
      loc_0040198E: lea     ebx,[unk_41AD58]
      loc_00401994: mov     ebx,dword ptr [ecx+ebx]
      loc_00401997: shr     edx,8
      loc_0040199A: xor     edx,ebx
      loc_0040199C: pop     ebx
      loc_0040199D: inc     ebx
      loc_0040199E: dec     eax
      loc_0040199F: jne loc_0040194D
                    mov     eax, edx
                    bswap   eax             // ntoh() on intel :)
                    mov     [answer], eax
                    popa
    };

    *ul0 = answer;

    //printf("answer is 0x%x\n", answer);
}

void brute_40190B(PUCHAR b0, PUCHAR b1)
{
    short * pshort = (short *)malloc(0x10000 * sizeof(short));
    int ishort=0;

    short trial=0;
    char correct=0;

    for(int i=0; i<=0xFFFF; ++i)
    {
        correct=0;
        trial=i & 0xFFFF;
        
        __asm
        {
                        pusha
                        xor     eax, eax
                        mov     ax, [trial]
          loc_00401923: xor     ecx,ecx
          loc_00401925: sub     eax,3
          loc_00401928: push    eax
          loc_00401929: mov     ecx,66666667h
          loc_0040192E: imul    ecx
          loc_00401930: sar     edx,1
          loc_00401932: push    edx
          loc_00401933: shr     edx,31h
          loc_00401936: pop     eax
          loc_00401937: add     edx,eax
          loc_00401939: push    edx
          loc_0040193A: shl     edx,2
          loc_0040193D: pop     eax
          loc_0040193E: add     edx,eax
          loc_00401940: pop     eax
          loc_00401941: sub     eax,edx
          loc_00401943: jne     wrong
                        mov     [correct], 1
                 wrong: popa
        }
        
      if(correct)
      {    
          pshort[ishort++] = trial & 0xFFFF;
          //printf("pushed 0x%04X\n", trial & 0xFFFF);
      }


    }

    int randi = rand() % ishort;

    *b1 = (pshort[randi] & 0xFF00)>>8;
    *b0 = pshort[randi] & 0xFF;

    //printf("returning %02X and %02X\n", *b0 & 0xFF, *b1 & 0xFF);

    free(pshort);
}

void brute_4018D4(char b5, char b6, char *answer)
{
    short target = (short)b6 << 8 | b5;

    //printf("target short is %04X\n", target & 0xFFFF);

    for(int i=0; i<0x19; ++i)
    for(int j=0; j<0x19; ++j)
    for(int k=0; k<0x19; ++k)
    for(int l=0; l<0x19; ++l)
    {
        byte by=0x20;
        short s;
        s = ((short)by << 5) + l;
        by = s & 0xFF;
        s = ((short)by << 5) + k;
        by = s & 0xFF;
        s = ((short)by << 5) + j;
        by = s & 0xFF;
        s = ((short)by << 5) + i;

        if(s==target)
        {
            //printf("found!\n"); 
            //printf("%c%c%c%c produces %04X\n", alphabet[i],
            //                                    alphabet[j], 
            //                                    alphabet[k], 
            //                                    alphabet[l],
            //                                    s & 0xFFFF);

            answer[0]=alphabet[i];
            answer[1]=alphabet[j];
            answer[2]=alphabet[k];
            answer[3]=alphabet[l];

            return;
        }
    }

    *answer=0;
}

void main(void)
{
    // seed randomizer, and prevent back-to-back
    // repetitive values on first rand() call
    srand(time(0));
    rand(); rand(); rand(); rand(); 

    UCHAR   serial_bytes[7];
    CHAR    stringa[16];
    CHAR    stringb[16];
    CHAR    szSerial[32]={0};
    
    int     i;

    regenerate:

    memset(serial_bytes, 0, 7);
    memset(stringa, 0, 16);
    memset(stringb, 0, 16);
    memset(szSerial, 0, 32);

    // satisfy requirement of code at 40190B to find first two bytes
    brute_40190B(serial_bytes, serial_bytes+1);

    // satisfy requirement of code at 40194D to find next five bytes
    derive_40194D(serial_bytes[0], serial_bytes[1], serial_bytes+2, (PULONG)(serial_bytes+3));

    // reverse the code at 4018FD
    for(UCHAR i=0; i<7; ++i)
        serial_bytes[i] ^= i+1;

    // find string that yields bytes [0..4]
    UINT64 k = *(PUINT64)serial_bytes & 0xFFFFFFFFFF;

    for(i=0; k; i++)
    {
        if((k&0x1F) >= 0x18)
            goto regenerate;

        stringa[i] = alphabet[k & 0x1F];
        k >>= 5;
    }

    if(strlen(stringa)<8)
        goto regenerate;

    // find string that yields bytes [5..6]
    brute_4018D4(serial_bytes[5], serial_bytes[6], stringb);

    if(!*stringb)
        goto regenerate;

    // create serial
    strcpy(szSerial, stringa);
    strcat(szSerial, stringb);

    // print serial 
    printf("\n!!!  CRACKME IS CURRENT-DIRECTORY SENSITIVE  !!!\n\n");
    printf("\n!!! NO KEYS WORK IF CRACKME RUN FROM BROWSER !!!\n\n");
    printf("\n!!!  THIS MUST BE THE FIRST SERIAL ENTERED   !!!\n\n");
    printf(" BYTES: ");
    for(int i=0; i<7; ++i)
        printf("%02X ", serial_bytes[i] & 0xFF);
    printf("\nSERIAL: %s\n\n", szSerial);

    printf("(hit a key to copy the serial, or ctrl+c to cancel)\n");
    _getch();

    // to the clipboard!
    OpenClipboard(NULL);
    EmptyClipboard();
    HGLOBAL hData = GlobalAlloc(GMEM_DDESHARE, strlen(szSerial)+1);
    char * pdata = (char *)GlobalLock(hData);
    memcpy(pdata, szSerial, strlen(szSerial)+1);
    GlobalUnlock(hData);
    SetClipboardData(CF_TEXT, hData);
    CloseClipboard();
}
