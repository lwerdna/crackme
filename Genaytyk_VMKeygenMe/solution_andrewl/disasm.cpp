// 8/2008 andrewl
//

#include "windows.h"

// stdio prototypes
extern "C" void * memset(void *, int, unsigned int);
extern "C" void * memcpy(void *, const void *, unsigned int);
extern "C" unsigned int strlen(const char *);
extern "C" void printf(char *, ...);

// just a dump of the VM's pcode, raw bytes
// 
unsigned char pcode[] =
{
    0x17, 0x04, 0x00, 0x01, 0xF9, 0x11, 0x19, 0x00, // ........
    0x01, 0xF8, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, // ........
    0x06, 0x03, 0x03, 0x01, 0x0B, 0x07, 0x00, 0x00, // ........
    0x00, 0xE0, 0x17, 0x04, 0x00, 0x02, 0x5D, 0x12, // ......].
    0x19, 0x00, 0x01, 0xF8, 0x01, 0x00, 0x00, 0x00, // ........
    0x06, 0x02, 0x0B, 0x07, 0x00, 0x00, 0x00, 0x07, // ........
    0x09, 0x01, 0x03, 0x12, 0x19, 0x00, 0x00, 0x1A, // ........
    0x03, 0x00, 0x00, 0x00, 0x03, 0x07, 0x06, 0x03, // ........
    0x03, 0x01, 0x0B, 0x07, 0x00, 0x00, 0x00, 0xE0, // ........
    0x17, 0x04, 0x00, 0x02, 0x7D, 0x09, 0x01, 0x07, // ....}...
    0x09, 0x01, 0x03, 0x12, 0x19, 0x00, 0x00, 0x48, // .......H
    0x03, 0x00, 0x00, 0x00, 0x03, 0x07, 0x06, 0x03, // ........
    0x03, 0x01, 0x0B, 0x07, 0x00, 0x00, 0x00, 0xE0, // ........
    0x01, 0x0B, 0x02, 0x00, 0x00, 0x00, 0x9B, 0x17, // ........
    0x04, 0x00, 0x02, 0xAF, 0x11, 0x19, 0x00, 0x01, // ........
    0xF8, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x10, // ........
    0x02, 0x01, 0x02, 0x0B, 0x02, 0x00, 0x00, 0x00, // ........
    0x04, 0x02, 0x0B, 0x07, 0x00, 0x00, 0x00, 0x07, // ........
    0x09, 0x01, 0x03, 0x12, 0x19, 0x00, 0x00, 0x6F, // .......o
    0x03, 0x00, 0x00, 0x00, 0x03, 0x01, 0x07, 0x09, // ........
    0x00, 0x00, 0x9B, 0x0F, 0x09, 0x09, 0x07, 0x01, // ........
    0x0C, 0x00, 0x00, 0x9B, 0x09, 0x01, 0x07, 0x09, // ........
    0x00, 0x00, 0x9F, 0x0E, 0x09, 0x09, 0x09, 0x01, // ........
    0x0C, 0x00, 0x00, 0x9F, 0x09, 0x01, 0x07, 0x09, // ........
    0x00, 0x00, 0xA3, 0x0E, 0x09, 0x09, 0x0B, 0x01, // ........
    0x0C, 0x00, 0x00, 0xA3, 0x09, 0x01, 0x07, 0x01, // ........
    0x00, 0x00, 0x9F, 0x07, 0x0C, 0x00, 0x00, 0x9B, // ........
    0x01, 0x02, 0x0C, 0x00, 0x00, 0xA3, 0x01, 0x01, // ........
    0x07, 0x01, 0x00, 0x00, 0x9B, 0x03, 0x0C, 0x00, // ........
    0x00, 0xA3, 0x01, 0x17, 0x04, 0x00, 0x02, 0xFF, // ........
    0x17, 0x04, 0x00, 0x04, 0x17, 0x01, 0x0C, 0x00, // ........
    0x00, 0xA7, 0x01, 0x17, 0x04, 0x00, 0x03, 0x6C, // .......l
    0x01, 0x07, 0x01, 0x00, 0x00, 0x9B, 0x01, 0x0C, // ........
    0x00, 0x00, 0x93, 0x01, 0x01, 0x07, 0x01, 0x00, // ........
    0x00, 0x9F, 0x01, 0x0B, 0x09, 0x00, 0x00, 0x00, // ........
    0x93, 0x02, 0x0B, 0x09, 0x00, 0x00, 0x00, 0x04, // ........
    0x01, 0x10, 0x09, 0x01, 0x01, 0x0B, 0x03, 0x00, // ........
    0x00, 0x00, 0x0A, 0x01, 0x0B, 0x04, 0x00, 0x00, // ........
    0x00, 0xAB, 0x01, 0x0B, 0x01, 0x00, 0x00, 0x00, // ........
    0x93, 0x17, 0x04, 0x00, 0x04, 0x58, 0x0A, 0x01, // .....X..
    0x13, 0x12, 0x17, 0x00, 0x01, 0x2B, 0x13, 0x00, // .....+..
    0x17, 0x04, 0x00, 0x03, 0xF2, 0x01, 0x0B, 0x09, // ........
    0x00, 0x00, 0x00, 0x93, 0x02, 0x0B, 0x09, 0x00, // ........
    0x00, 0x00, 0x04, 0x12, 0x16, 0x00, 0x01, 0xF8, // ........
    0x01, 0x09, 0x01, 0x07, 0x01, 0x00, 0x00, 0xA3, // ........
    0x01, 0x0B, 0x09, 0x00, 0x00, 0x00, 0x93, 0x02, // ........
    0x0B, 0x09, 0x00, 0x00, 0x00, 0x04, 0x01, 0x10, // ........
    0x09, 0x01, 0x01, 0x07, 0x01, 0x00, 0x00, 0xA7, // ........
    0x01, 0x0C, 0x00, 0x00, 0xB3, 0x01, 0x01, 0x0B, // ........
    0x09, 0x00, 0x00, 0x00, 0xB3, 0x02, 0x0B, 0x09, // ........
    0x00, 0x00, 0x00, 0x04, 0x01, 0x13, 0x09, 0x6B, // .......k
    0x79, 0x74, 0x5F, 0x01, 0x0B, 0x03, 0x00, 0x00, // yt_.....
    0x00, 0x0F, 0x01, 0x0B, 0x04, 0x00, 0x00, 0x00, // ........
    0xB3, 0x01, 0x0B, 0x01, 0x00, 0x00, 0x00, 0x93, // ........
    0x17, 0x04, 0x00, 0x04, 0x58, 0x0A, 0x01, 0x03, // ....X...
    0x12, 0x19, 0x00, 0x01, 0xA2, 0x03, 0x00, 0x00, // ........
    0x00, 0x00, 0x01, 0x0B, 0x07, 0x00, 0x00, 0x00, // ........
    0x93, 0x01, 0x0B, 0x08, 0x00, 0x00, 0x00, 0x2A, // .......*
    0x07, 0x06, 0x03, 0x03, 0x01, 0x08, 0x0F, 0x07, // ........
    0x12, 0x16, 0x00, 0x01, 0xF8, 0x0F, 0x08, 0x09, // ........
    0x01, 0x07, 0x09, 0x01, 0x08, 0x09, 0x01, 0x03, // ........
    0x12, 0x19, 0x00, 0x01, 0xD4, 0x03, 0x00, 0x00, // ........
    0x00, 0x08, 0x01, 0x0D, 0x00, 0x01, 0x09, 0x01, // ........
    0x1E, 0x07, 0x06, 0x01, 0x01, 0x07, 0x06, 0x04, // ........
    0x04, 0x01, 0x0B, 0x07, 0x00, 0x00, 0x00, 0xE0, // ........
    0x01, 0x08, 0x0F, 0x07, 0x12, 0x17, 0x00, 0x02, // ........
    0x1F, 0x0F, 0x2D, 0x09, 0x01, 0x04, 0x01, 0x11, // ..-.....
    0x07, 0x00, 0x10, 0x04, 0x00, 0x02, 0x3C, 0x01, // ......<.
    0x0B, 0x03, 0x00, 0x00, 0x00, 0x00, 0x11, 0x16, // ........
    0x00, 0x02, 0x3C, 0x0F, 0x03, 0x09, 0x01, 0x03, // ..<.....
    0x12, 0x1F, 0x00, 0x02, 0x26, 0x03, 0x00, 0x10, // ....&...
    0x04, 0x00, 0x02, 0x55, 0x09, 0x01, 0x07, 0x12, // ...U....
    0x1F, 0x00, 0x02, 0x08, 0x07, 0x00, 0x12, 0x19, // ........
    0x00, 0x02, 0x55, 0x04, 0x00, 0x00, 0x00, 0x02, // ..U.....
    0x07, 0x06, 0x01, 0x01, 0x1A, 0x01, 0x0B, 0x01, // ........
    0xFF, 0xFF, 0xFF, 0xFF, 0x1A, 0x01, 0x06, 0x08, // ........
    0x07, 0x01, 0x08, 0x0F, 0x08, 0x11, 0x17, 0x00, // ........
    0x02, 0x74, 0x0F, 0x00, 0x09, 0x01, 0x08, 0x10, // .t......
    0x04, 0x00, 0x02, 0x61, 0x03, 0x06, 0x08, 0x07, // ...a....
    0x01, 0x06, 0x01, 0x08, 0x1A, 0x07, 0x06, 0x04, // ........
    0x04, 0x01, 0x08, 0x0F, 0x07, 0x01, 0x0B, 0x02, // ........
    0x00, 0x00, 0x00, 0x00, 0x0A, 0x01, 0x02, 0x09, // ........
    0x01, 0x02, 0x12, 0x16, 0x00, 0x02, 0x8F, 0x0F, // ........
    0x02, 0x03, 0x0B, 0x02, 0x00, 0x00, 0x00, 0x00, // ........
    0x01, 0x10, 0x07, 0x11, 0x09, 0x01, 0x07, 0x12, // ........
    0x1F, 0x00, 0x02, 0x7D, 0x07, 0x00, 0x1A, 0x18, // ...}....
    0x01, 0x02, 0x07, 0x06, 0x02, 0x02, 0x07, 0x06, // ........
    0x01, 0x01, 0x01, 0x06, 0x04, 0x07, 0x02, 0x0B, // ........
    0x07, 0x00, 0x00, 0x00, 0x05, 0x03, 0x0B, 0x04, // ........
    0x00, 0x00, 0x00, 0x01, 0x01, 0x0B, 0x08, 0x00, // ........
    0x00, 0x00, 0x01, 0x07, 0x06, 0x01, 0x01, 0x01, // ........
    0x08, 0x0F, 0x07, 0x04, 0x06, 0x01, 0x08, 0x02, // ........
    0x06, 0x02, 0x01, 0x04, 0x0B, 0x08, 0x00, 0x00, // ........
    0x00, 0x29, 0x0A, 0x01, 0x07, 0x12, 0x14, 0x00, // .)......
    0x02, 0xD3, 0x07, 0x04, 0x09, 0x01, 0x07, 0x01, // ........
    0x06, 0x01, 0x02, 0x19, 0x01, 0x02, 0x1A, 0x01, // ........
    0x0B, 0x08, 0x00, 0x00, 0x00, 0xBB, 0x01, 0x06, // ........
    0x04, 0x08, 0x02, 0x07, 0x04, 0x00, 0x01, 0x05, // ........
    0x01, 0x0B, 0x07, 0x00, 0x00, 0x00, 0x33, 0x02, // ......3.
    0x0B, 0x07, 0x00, 0x00, 0x00, 0x5F, 0x07, 0x06, // ....._..
    0x03, 0x03, 0x07, 0x06, 0x01, 0x01, 0x07, 0x08, // ........
    0x0F, 0x08, 0x07, 0x09, 0x0F, 0x75, 0x02, 0x06, // .....u..
    0x0F, 0x13, 0x02, 0x0B, 0x03, 0x00, 0x00, 0x00, // ........
    0x03, 0x07, 0x0B, 0x03, 0x00, 0x00, 0x00, 0x45, // .......E
    0x0F, 0x09, 0x03, 0x03, 0x09, 0x01, 0x08, 0x01, // ........
    0x10, 0x07, 0x0F, 0x11, 0x19, 0x00, 0x03, 0x6B, // .......k
    0x07, 0x00, 0x00, 0x00, 0x33, 0x0A, 0x01, 0x07, // ....3...
    0x12, 0x14, 0x00, 0x03, 0x26, 0x08, 0x04, 0x01, // ....&...
    0x0B, 0x08, 0x00, 0x00, 0x00, 0xBB, 0x10, 0x04, // ........
    0x00, 0x03, 0x26, 0x1A, 0x01, 0x0B, 0x01, 0x13, // ..&.....
    0xA1, 0xDC, 0xB4, 0x01, 0x0B, 0x02, 0x45, 0xE8, // ......E.
    0xAD, 0xC1, 0x01, 0x0B, 0x03, 0x00, 0x00, 0x00, // ........
    0x28, 0x01, 0x0B, 0x07, 0x00, 0x00, 0x00, 0x33, // (......3
    0x01, 0x06, 0x08, 0x07, 0x02, 0x0B, 0x08, 0x00, // ........
    0x00, 0x00, 0x30, 0x01, 0x06, 0x04, 0x08, 0x07, // ..0.....
    0x08, 0x01, 0x07, 0x0F, 0x09, 0x01, 0x03, 0x02, // ........
    0x08, 0x01, 0x08, 0x02, 0x0B, 0x07, 0x00, 0x00, // ........
    0x00, 0x04, 0x02, 0x0B, 0x08, 0x00, 0x00, 0x00, // ........
    0x04, 0x12, 0x14, 0x00, 0x03, 0x97, 0x07, 0x04, // ........
    0x07, 0x06, 0x01, 0x02, 0x01, 0x06, 0x09, 0x01, // ........
    0x01, 0x06, 0x0A, 0x02, 0x01, 0x06, 0x02, 0x09, // ........
    0x01, 0x06, 0x01, 0x0A, 0x0A, 0x01, 0x03, 0x12, // ........
    0x19, 0x00, 0x03, 0x81, 0x03, 0x00, 0x00, 0x00, // ........
    0x00, 0x01, 0x0C, 0x00, 0x00, 0xAB, 0x01, 0x01, // ........
    0x0B, 0x09, 0x00, 0x00, 0x00, 0xAB, 0x02, 0x0B, // ........
    0x09, 0x00, 0x00, 0x00, 0x04, 0x01, 0x10, 0x09, // ........
    0x02, 0x1A, 0x07, 0x06, 0x01, 0x01, 0x01, 0x0B, // ........
    0x07, 0x00, 0x00, 0x00, 0x33, 0x01, 0x06, 0x08, // ....3...
    0x07, 0x02, 0x0B, 0x08, 0x00, 0x00, 0x00, 0x5D, // .......]
    0x02, 0x08, 0x01, 0x07, 0x09, 0x01, 0x07, 0x12, // ........
    0x14, 0x00, 0x04, 0x08, 0x07, 0x08, 0x1A, 0x01, // ........
    0x0B, 0x01, 0x1A, 0x2B, 0x3C, 0x4D, 0x01, 0x0B, // ...+<M..
    0x03, 0x00, 0x00, 0x00, 0xFF, 0x01, 0x0B, 0x07, // ........
    0x00, 0x00, 0x00, 0x33, 0x01, 0x06, 0x08, 0x07, // ...3....
    0x02, 0x0B, 0x08, 0x00, 0x00, 0x00, 0x5D, 0x01, // ......].
    0x08, 0x02, 0x07, 0x07, 0x06, 0x01, 0x02, 0x0F, // ........
    0x09, 0x01, 0x07, 0x09, 0x01, 0x07, 0x12, 0x14, // ........
    0x00, 0x04, 0x37, 0x07, 0x08, 0x0A, 0x01, 0x13, // ..7.....
    0x12, 0x17, 0x00, 0x04, 0x25, 0x13, 0x00, 0x1A, // ....%...
    0x1C, 0x18, 0x01, 0x01, 0x01, 0x08, 0x03, 0x04, // ........
    0x01, 0x0C, 0x00, 0x01, 0x0A, 0x03, 0x01, 0x06, // ........
    0x09, 0x04, 0x02, 0x0B, 0x09, 0x00, 0x00, 0x00, // ........
    0x04, 0x01, 0x08, 0x03, 0x09, 0x01, 0x0B, 0x09, // ........
    0x00, 0x00, 0x01, 0x0A, 0x02, 0x0B, 0x09, 0x00, // ........
    0x00, 0x00, 0x04, 0x01, 0x10, 0x09, 0x03, 0x17, // ........
    0x04, 0x00, 0x06, 0x82, 0x01, 0x06, 0x08, 0x01, // ........
    0x19, 0x01, 0x07, 0x07, 0x06, 0x01, 0x01, 0x01, // ........
    0x0B, 0x03, 0x00, 0x00, 0x00, 0x64, 0x07, 0x06, // .....d..
    0x02, 0x02, 0x01, 0x06, 0x09, 0x07, 0x01, 0x06, // ........
    0x02, 0x09, 0x02, 0x0B, 0x02, 0x00, 0x00, 0x00, // ........
    0x07, 0x01, 0x06, 0x0A, 0x04, 0x01, 0x08, 0x0F, // ........
    0x09, 0x07, 0x08, 0x0F, 0x0A, 0x09, 0x01, 0x0A, // ........
    0x03, 0x08, 0x0F, 0x0A, 0x0A, 0x01, 0x0A, 0x02, // ........
    0x09, 0x0F, 0x12, 0x01, 0x10, 0x09, 0x0F, 0x09, // ........
    0x01, 0x0A, 0x09, 0x01, 0x09, 0x12, 0x14, 0x00, // ........
    0x04, 0xB5, 0x09, 0x02, 0x07, 0x06, 0x02, 0x02, // ........
    0x01, 0x06, 0x09, 0x07, 0x01, 0x08, 0x0A, 0x09, // ........
    0x0F, 0x09, 0x0A, 0x03, 0x01, 0x10, 0x09, 0x0A, // ........
    0x02, 0x0B, 0x09, 0x00, 0x00, 0x00, 0x04, 0x01, // ........
    0x08, 0x0A, 0x09, 0x0E, 0x09, 0x0A, 0x03, 0x01, // ........
    0x10, 0x09, 0x0A, 0x01, 0x06, 0x09, 0x07, 0x01, // ........
    0x06, 0x0A, 0x04, 0x01, 0x08, 0x01, 0x0A, 0x07, // ........
    0x10, 0x09, 0x01, 0x02, 0x0B, 0x0A, 0x00, 0x00, // ........
    0x00, 0x04, 0x02, 0x0B, 0x09, 0x00, 0x00, 0x00, // ........
    0x04, 0x01, 0x08, 0x01, 0x0A, 0x07, 0x10, 0x09, // ........
    0x01, 0x01, 0x06, 0x09, 0x07, 0x01, 0x06, 0x0A, // ........
    0x04, 0x02, 0x10, 0x09, 0x01, 0x01, 0x08, 0x01, // ........
    0x0A, 0x02, 0x0B, 0x09, 0x00, 0x00, 0x00, 0x04, // ........
    0x02, 0x10, 0x09, 0x01, 0x09, 0x01, 0x02, 0x12, // ........
    0x19, 0x00, 0x04, 0xE0, 0x02, 0x00, 0x00, 0x00, // ........
    0x10, 0x07, 0x06, 0x02, 0x02, 0x01, 0x0B, 0x06, // ........
    0x00, 0x00, 0x00, 0x20, 0x17, 0x04, 0x00, 0x07, // ... ....
    0x64, 0x11, 0x19, 0x00, 0x05, 0xA9, 0x01, 0x00, // d.......
    0x00, 0x00, 0x00, 0x18, 0x01, 0x06, 0x16, 0x19, // ........
    0x00, 0x05, 0x89, 0x06, 0x00, 0x00, 0x00, 0x07, // ........
    0x03, 0x0B, 0x06, 0x00, 0x00, 0x00, 0x07, 0x13, // ........
    0x19, 0x00, 0x05, 0x78, 0x06, 0x00, 0x00, 0x00, // ...x....
    0x07, 0x01, 0x06, 0x09, 0x04, 0x02, 0x06, 0x09, // ........
    0x02, 0x01, 0x08, 0x0F, 0x09, 0x01, 0x06, 0x09, // ........
    0x07, 0x02, 0x06, 0x09, 0x06, 0x07, 0x10, 0x09, // ........
    0x0F, 0x19, 0x01, 0x06, 0x10, 0x04, 0x00, 0x05, // ........
    0xD9, 0x18, 0x01, 0x02, 0x16, 0x19, 0x00, 0x05, // ........
    0xC7, 0x02, 0x00, 0x00, 0x00, 0x07, 0x03, 0x0B, // ........
    0x02, 0x00, 0x00, 0x00, 0x07, 0x13, 0x19, 0x00, // ........
    0x05, 0xB6, 0x02, 0x00, 0x00, 0x00, 0x07, 0x01, // ........
    0x06, 0x09, 0x07, 0x02, 0x06, 0x09, 0x02, 0x0B, // ........
    0x03, 0x09, 0x07, 0x10, 0x09, 0x11, 0x19, 0x01, // ........
    0x02, 0x09, 0x01, 0x02, 0x14, 0x19, 0x00, 0x05, // ........
    0xEA, 0x02, 0x00, 0x00, 0x00, 0x08, 0x07, 0x06, // ........
    0x02, 0x02, 0x0A, 0x01, 0x06, 0x12, 0x19, 0x00, // ........
    0x05, 0x5C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x07, // .\......
    0x06, 0x02, 0x02, 0x01, 0x06, 0x09, 0x07, 0x01, // ........
    0x08, 0x0F, 0x09, 0x18, 0x01, 0x07, 0x02, 0x0B, // ........
    0x07, 0x00, 0x00, 0x00, 0x07, 0x03, 0x06, 0x07, // ........
    0x02, 0x07, 0x10, 0x07, 0x0F, 0x19, 0x01, 0x07, // ........
    0x01, 0x08, 0x0F, 0x09, 0x0F, 0x09, 0x0F, 0x03, // ........
    0x01, 0x10, 0x09, 0x0F, 0x09, 0x01, 0x09, 0x09, // ........
    0x01, 0x02, 0x12, 0x19, 0x00, 0x05, 0xFF, 0x02, // ........
    0x00, 0x00, 0x00, 0x08, 0x01, 0x06, 0x09, 0x07, // ........
    0x01, 0x08, 0x01, 0x09, 0x0F, 0x09, 0x01, 0x07, // ........
    0x01, 0x10, 0x09, 0x01, 0x02, 0x0B, 0x09, 0x00, // ........
    0x00, 0x00, 0x04, 0x01, 0x08, 0x01, 0x09, 0x0E, // ........
    0x09, 0x01, 0x07, 0x01, 0x10, 0x09, 0x01, 0x0A, // ........
    0x01, 0x03, 0x12, 0x19, 0x00, 0x04, 0x9E, 0x03, // ........
    0x00, 0x00, 0x00, 0x00, 0x01, 0x0B, 0x09, 0x00, // ........
    0x00, 0x01, 0x0A, 0x01, 0x13, 0x09, 0x00, 0x00, // ........
    0x00, 0x00, 0x02, 0x0B, 0x09, 0x00, 0x00, 0x00, // ........
    0x04, 0x01, 0x13, 0x09, 0x00, 0x00, 0x00, 0x00, // ........
    0x1D, 0x1A, 0x07, 0x06, 0x02, 0x02, 0x01, 0x0B, // ........
    0x09, 0x00, 0x00, 0x01, 0x0A, 0x09, 0x01, 0x09, // ........
    0x02, 0x06, 0x09, 0x02, 0x01, 0x08, 0x0F, 0x09, // ........
    0x0A, 0x01, 0x09, 0x02, 0x10, 0x09, 0x0F, 0x03, // ........
    0x10, 0x09, 0x11, 0x01, 0x0B, 0x09, 0x00, 0x00, // ........
    0x01, 0x0A, 0x01, 0x08, 0x01, 0x09, 0x0F, 0x09, // ........
    0x01, 0x05, 0x01, 0x10, 0x09, 0x01, 0x02, 0x0B, // ........
    0x09, 0x00, 0x00, 0x00, 0x04, 0x01, 0x08, 0x01, // ........
    0x09, 0x0E, 0x09, 0x01, 0x05, 0x01, 0x10, 0x09, // ........
    0x01, 0x09, 0x01, 0x02, 0x12, 0x19, 0x00, 0x06, // ........
    0x86, 0x02, 0x00, 0x00, 0x00, 0x07, 0x07, 0x06, // ........
    0x01, 0x01, 0x07, 0x06, 0x02, 0x02, 0x07, 0x06, // ........
    0x03, 0x03, 0x01, 0x0B, 0x07, 0x00, 0x00, 0x00, // ........
    0x45, 0x01, 0x0B, 0x09, 0x00, 0x00, 0x01, 0x0A, // E.......
    0x02, 0x06, 0x09, 0x02, 0x01, 0x08, 0x0F, 0x09, // ........
    0x02, 0x06, 0x03, 0x01, 0x04, 0x06, 0x07, 0x07, // ........
    0x09, 0x01, 0x03, 0x04, 0x06, 0x03, 0x07, 0x09, // ........
    0x01, 0x02, 0x12, 0x19, 0x00, 0x06, 0xE9, 0x02, // ........
    0x00, 0x00, 0x00, 0x04, 0x18, 0x01, 0x03, 0x07, // ........
    0x06, 0x01, 0x01, 0x07, 0x06, 0x02, 0x02, 0x07, // ........
    0x06, 0x03, 0x03, 0x01, 0x0B, 0x07, 0x00, 0x00, // ........
    0x00, 0x35, 0x01, 0x0B, 0x09, 0x00, 0x00, 0x01, // .5......
    0x0A, 0x02, 0x0B, 0x09, 0x00, 0x00, 0x00, 0x04, // ........
    0x02, 0x06, 0x09, 0x02, 0x01, 0x08, 0x0F, 0x09, // ........
    0x03, 0x06, 0x03, 0x01, 0x04, 0x06, 0x07, 0x07, // ........
    0x09, 0x01, 0x03, 0x04, 0x06, 0x03, 0x07, 0x09, // ........
    0x01, 0x02, 0x12, 0x19, 0x00, 0x07, 0x2A, 0x02, // ......*.
    0x00, 0x00, 0x00, 0x04, 0x19, 0x01, 0x01, 0x04, // ........
    0x06, 0x01, 0x03, 0x1A, 0x18, 0x01, 0x06, 0x18, // ........
    0x01, 0x08, 0x01, 0x0B, 0x01, 0x00, 0x00, 0x00, // ........
    0x01, 0x10, 0x04, 0x00, 0x07, 0x7A, 0x0D, 0x09, // .....z..
    0x01, 0x01, 0x0A, 0x01, 0x06, 0x12, 0x19, 0x00, // ........
    0x07, 0x76, 0x06, 0xFF, 0xFF, 0xFF, 0xFF, 0x08, // .v......
    0x06, 0x08, 0x01, 0x11, 0x19, 0x00, 0x07, 0xA1, // ........
    0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0B, 0x01, // ........
    0x00, 0x00, 0x00, 0x01, 0x10, 0x04, 0x00, 0x07, // ........
    0xA5, 0x07, 0x06, 0x01, 0x01, 0x19, 0x01, 0x08, // ........
    0x19, 0x01, 0x06, 0x1A                          // ....    
};

// instr[1] references this table of varying length entries (can have value 0..32)
// which describes:
//
// - amount of operands
// - size of each operand
// - type of each operand
//     'R': register
//     'Q': [register]
//     'O': offset
//     'I': immediate     
unsigned char oper_lookup[] =
{
 //  amt  size  type  size  type  size  type  size  type
    0x01, 0x01, 'R' , 
    0x01, 0x03, 'O' , 
    0x01, 0x01, 'Q' , 
    0x01, 0x03, 'I' , 
    0x01, 0x04, 'I' , 	
    0x02, 0x01, 'R' , 0x01, 'R' ,
    0x02, 0x01, 'R' , 0x03, 'O' , 
    0x02, 0x01, 'R' , 0x01, 'Q' , 
    0x02, 0x01, 'R' , 0x01, 'I' , 
    0x02, 0x01, 'R' , 0x02, 'I' , 
    0x02, 0x01, 'R' , 0x04, 'I' , 
    0x02, 0x03, 'O' , 0x01, 'R' , 
    0x02, 0x03, 'O' , 0x01, 'I' , 
    0x02, 0x03, 'O' , 0x02, 'I' , 
    0x02, 0x03, 'O' , 0x04, 'I' , 
    0x02, 0x01, 'Q' , 0x01, 'R' , 
    0x02, 0x01, 'Q' , 0x01, 'I' , 
    0x02, 0x01, 'Q' , 0x02, 'I' , 
    0x02, 0x01, 'Q' , 0x04, 'I' , 
    0x03, 0x03, 'I' , 0x01, 'R' , 0x01, 'R' , 	
    0x03, 0x03, 'I' , 0x01, 'R' , 0x03, 'O' , 
    0x03, 0x03, 'I' , 0x01, 'R' , 0x01, 'Q' , 
    0x03, 0x03, 'I' , 0x01, 'R' , 0x01, 'I' , 
    0x03, 0x03, 'I' , 0x01, 'R' , 0x02, 'I' , 
    0x03, 0x03, 'I' , 0x01, 'R' , 0x04, 'I' ,
    0x03, 0x03, 'I' , 0x03, 'O' , 0x01, 'R' , 
    0x03, 0x03, 'I' , 0x03, 'O' , 0x01, 'I' , 
    0x03, 0x03, 'I' , 0x03, 'O' , 0x02, 'I' , 
    0x03, 0x03, 'I' , 0x03, 'O' , 0x04, 'I' , 
    0x03, 0x03, 'I' , 0x01, 'Q' , 0x01, 'R' ,
    0x03, 0x03, 'I' , 0x01, 'Q' , 0x01, 'I' ,
    0x03, 0x03, 'I' , 0x01, 'Q' , 0x02, 'I' , 
    0x03, 0x03, 'I' , 0x01, 'Q' , 0x04, 'I'         
};

// this just lets me reference oper_lookup without scanning over it
unsigned char oper_lookup_offs[] = {
	0, 0, 3, 6, 9, 12, 15, 20, 25, 30, 35, 40, 45, 
	50, 55, 60, 65, 70, 75, 80, 85, 92, 99, 106,
	113, 120, 127, 134, 141, 148, 155, 162, 169, 
	176, 183, 184 };

unsigned char context_code[] =
{
    0x01, 0x04, 0x04, 	// code 01: read from context+0x04 exactly 0x04 bytes 
    0x02, 0x08, 0x04,   // code 02: read from context+0x08 exactly 0x04 bytes 
    0x03, 0x0C, 0x04,   // etc... ECX
    0x04, 0x10, 0x04,   // EDX
    0x05, 0x14, 0x04,   // ESP
    0x06, 0x18, 0x04, 
    0x07, 0x1C, 0x04, 
    0x08, 0x20, 0x04, 
    0x09, 0x24, 0x04, 
    0x0A, 0x28, 0x04, 
    0x0B, 0x2C, 0x04, 
    0x0C, 0x30, 0x04, 
    0x0D, 0x34, 0x04, 
    0x0E, 0x38, 0x04, 
    0x0F, 0x04, 0x01, 	// code 0F: read from context+0x04 exactly 0x01 bytes (the "al") 
    0x10, 0x05, 0x01,   // code 10: read from context+0x05 exactly 0x01 bytes (the "ah")
    0x11, 0x08, 0x01, 
    0x12, 0x09, 0x01, 
    0x13, 0x0C, 0x01, 
    0x14, 0x0D, 0x01, 
    0x15, 0x10, 0x01, 
    0x16, 0x11, 0x01, 
    0x17, 0x04, 0x02, 
    0x18, 0x08, 0x02, 
    0x19, 0x0C, 0x02, 
    0x1A, 0x10, 0x02, 
    0x1B, 0x14, 0x02, 
    0x1C, 0x18, 0x02, 
    0x1D, 0x1C, 0x02, 
    0x1E, 0x20, 0x02                                      
};

PCHAR context_code_regname[] = { 
	"", "rex01", "rex02", "rex03", "rex04",  "resp", "rex06", "rex07", 
	    "rex08", "rex09", "rex0A", "rex0B", "rex0C", "rex0D", "rex0E",
	    "rlx01", "rhx01", "rlx02", "rhx02", "rlx03", "rhx03", "rlx04", "rhx04",
	     "rx01",  "rx02",  "rx03",  "rx04",  "rxsp",  "rx06",  "rx07" };

#define pcode_base 0x4034BE
#define cmem_base 0x403C6A

UINT print_operands(PUCHAR instr)
{
	
	// seek operand code
	PUCHAR oprnd_code = &oper_lookup[oper_lookup_offs[instr[1]]];
		
	//
	//   [0] : number of operands N
	//   [1] : operand 0 size
	//   [2] : operand 0 type
	//   ...
	//   [N] : operand N-1 size
	// [N+1] : operand N-1 type
		
	PUCHAR oprnd = &instr[2];
		
	// for each operand
	for(int i=0; i<oprnd_code[0]; ++i)
	{

		// lookup operand code
		PUCHAR sz_tp = &oprnd_code[1+2*i];

		// actually retrieve operand value
		DWORD op_value = 0;
		for(int j=0; j<sz_tp[0]; ++j)
			op_value = (op_value << 8) | *oprnd++;

		//
		// [0] : operand size
		// [1] : operand type
		switch(sz_tp[1])
		{
			case 0x04: printf("imm"); break; // immediate value
			case 0x51: // 'Q' == ?? memory access thru register
			{
				PUCHAR ctx_code = &context_code[3*op_value];
				UINT reg_index = ctx_code[1]/4 - 1;
				
				if(ctx_code[2] != 4)
					printf("WTF 3838888888\n");

				printf("cmem[%s]", context_code_regname[op_value]);
				
				break; 
			}
						
			case 0x52: // 'R' == 'register' ?
			{					// operand is context access code
				printf("%s", context_code_regname[op_value]);
				break;
			}
				
			case 0x49: // 'I' == 'immediate' ?
			{
				printf("imm%X", op_value); 
				break;
			}

			case 0x4F: // 'O' == 'offset' ?
			{
				// constant memory access
				//printf("cmem[%X] (%X)", op_value, cmem_base+op_value); 
				printf("[%X]", cmem_base+op_value);
				break;
			}
			default: printf("WTF"); break;
		}

		// comma separate operands
		if(i!=(oprnd_code[0]-1))
			printf(", ");
	}

	// return length of operands
	return (UINT) (oprnd - &instr[2]);
}

void main(void)
{
	for(int i=0; i<sizeof(pcode); )
	{
		char opcode = pcode[i];
		char oper_index = pcode[i+1];
		int instr_size = 0;
		
		PUCHAR operand_code = &oper_lookup[oper_lookup_offs[pcode[i+1]]];

		printf("%X: [%02X] ", pcode_base+i, opcode&0xFF);

		switch(opcode)
		{
			case 0x1A:
				printf("ret");
				instr_size=1;
				break;
			case 0x1B:
				printf("nop");
				instr_size=1;
				break;
			case 0x1E:
				printf("exit"); 
				instr_size=1;
				break;
			case 0x1C: case 0x1D:
			{
				PCHAR mnems[] = {"pusha", "popa"};
				printf("%s ", mnems[opcode-0x1C]);
				instr_size = 1;
				break;
			}
			case 0x18: case 0x19:
			{
				PCHAR mnems[] = {"push", "pop"};
				printf("%s ", mnems[opcode-0x18]);
				instr_size = 2 + print_operands(&pcode[i]);
				break;
			}	
			case 0x10:
			{
				printf("jmp ");
				print_operands(&pcode[i]);
				DWORD target = pcode_base + ((pcode[i+2]<<16) | (pcode[i+3]<<8) | pcode[i+4]);
				printf(" (%X)", target);
				instr_size=5;
				break;		
			}	
			case 0x17:
			{
				DWORD target = pcode_base + ((pcode[i+2]<<16) | (pcode[i+3]<<8) | pcode[i+4]); 
				printf("call ");
				print_operands(&pcode[i]);
				printf(" (%X)", target);
				instr_size=5;
				break;				
			}
			case 0xC: case 0xD: case 0xE: case 0xF:
			{
				PCHAR mnem[] = {"shr", "shl", "ror", "rol"};
				printf("%s ", mnem[opcode-0xC]);
				instr_size = 2 + print_operands(&pcode[i]);
				break;
			}
			case 1: case 2: case 3: case 4: case 5: case 6: case 7: case 8:
			{
				PCHAR mnem[] = {"", "mov", "add", "sub", "imul", "idiv", "or", "xor", "and"};
				printf("%s ", mnem[opcode]);
				instr_size = instr_size + 2 + print_operands(&pcode[i]);	
				break;
			}
			case 0x11: case 0x12: case 0x13: case 0x14: case 0x15: case 0x16:
			{
				PCHAR mnem[] = {"jz", "jnz", "ja", "jb", "jnb", "jbe"};
				printf("%s ", mnem[opcode-0x11]);
				instr_size = instr_size + 2 + print_operands(&pcode[i]);
				DWORD target = pcode_base;
			        target += (pcode[i+2]<<16) | (pcode[i+3]<<8) | pcode[i+4]; 
				printf(" (%X)", target);
				break;
		
			}
			case 0x09: case 0x0A: case 0x0B:
			{
				PCHAR mnem[] = {"inc", "dec", "not"};
				printf("%s ", mnem[opcode-0x09]);
				instr_size = 2 + print_operands(&pcode[i]);
				break;
			}
			default:
			{
				printf("[%02X] ",  oper_index&0xFF);
				instr_size = instr_size + 2 + print_operands(&pcode[i]);
			}
			
		}

		printf("\n");

		i+=instr_size;
	}
}



