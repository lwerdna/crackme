// actual values found with the longer code substituted in so that you can see some action
// delete these out and uncommon the code to see the full thing (about 1.5-2 days on intel core)

#include <windows.h>
#include <stdio.h>

#include "bitvects.h"
#include "random.h"
#include "fevaluate.h"

INT main(INT ac, PCHAR *av)
{
    // generic variables
    Vect x,y;

    /* test out translation from vect -> char[128] and f_evaluate/f_evaluatev

    CHAR p1[128]={0,0,1,0,1,0,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,1,0,1,1,1,1,0,1,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,1,1,1,0,0,1,1,0,0,1,1,1,0,0,0,1,0,1,1,0,1,0,0,0,1,1,0,1,1,1,1,0,0,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,0,1,0,1,0,0,1,0,1,1,1,1,0,1,1};
    CHAR p2[128]={1,0,0,1,0,0,1,0,1,1,1,1,1,1,0,0,1,0,0,0,1,1,0,0,0,1,1,1,1,1,1,0,1,1,0,1,0,1,1,1,0,1,0,0,0,0,0,0,1,1,0,0,1,0,1,1,1,0,0,1,1,1,0,1,1,0,1,0,1,0,0,0,0,1,1,0,1,1,1,1,0,0,0,1,1,0,1,0,0,0,0,0,0,1,1,0,1,1,1,0,0,0,0,1,1,1,1,0,0,0,1,0,1,1,0,1,0,1,1,1,1,1,0,1,1,1,0,0};

    CHAR signature[120];
    memset(signature,0x00,120);

    printf("f(p2):");
    f_evaluate(p2,128,signature,120);
    for(INT i=0; i<120; ++i)
        printf("%d",signature[i]);
    printf("\n");

    Vect x;
    for(INT i=0; i<128; ++i)
        if(p2[i])
            x.SetBit(127-i);
  
    x.Print("x");

    Vect y;
    y = f_evaluatev(x);

    y.Print("y");

    while(1);
    */

    InitRandom();

    // generate random pool
    Vect rands[128];
    for(INT i=0; i<128; ++i)
        rands[i].Random();

    Vect f_rands[128];
    for(INT i=0; i<128; ++i)
        f_rands[i] = f_evaluatev(rands[i]);

    // search for vectors that make S1 == 0
    // looking for X where L1(X) == 0QQQQQQQ



    //
    //
/*
    BitBasis bb_0QQQQQQQ;
    
    for(INT j=0; 1; j++)
    {
        Vect c;
        c.Random();

        BitBasis bb;

        for(INT i=0; i<128; ++i)
        {
            Vect d = f_rands[i] + f_evaluatev(c+rands[i]);
            
            bb.AddFast(d);

            if(bb.dimension > 112)
                break;
        }

        if(bb.dimension <= 112)
        {
            printf("found one! ");
            c.Println();
            bb_0QQQQQQQ.AddFast(c);
            bb_0QQQQQQQ.Print("bb_0QQQQQQQ");
        }

        if(!(j&0xFFFF))
            printf("on iter %d\n", j);

        if(bb_0QQQQQQQ.dimension == 112)
            break;
    }
*/

UINT64 bb_0QQQQQQQ_vects[224] = { // dimension: 112
0xF9E44F5F00710D6B, 0xD1D4C73EDE30386B,
0x544B68B359B4EBF6, 0xDCA8C4FC37C9D50A,
0x299CB59507D58130, 0x4E3CDE573CBA3B5B,
0x18FEE116B440D398, 0x3585472B86E28EC4,
0x0C9EF4E3AF4022B3, 0x403B1B740B55C141,
0x043F17E3E5AE2043, 0x81C2FB8D4B4F8549,
0x02A3AEE696332684, 0x4F06519AB9A64468,
0x0164131A9D7884EE, 0xB4F376F91FF0FCF5,
0x00A9731B8ACFE544, 0xCE719373749E638B,
0x0051D7DCC5D00B01, 0x80AF790EBA353AE8,
0x00200B6775FA4931, 0x2BD9FDC56EBD4B2F,
0x00184AC270C65631, 0xC6C27B647C3C4A28,
0x0009203456D89D88, 0x5BFEDEF3E35E9DE3,
0x0004D0EBB06FDC77, 0x0407E84A5C1025F9,
0x00037E6D94143E7A, 0x008509D2976726A2,
0x000100ACF4F7032E, 0xB171A100D40090D4,
0x0000AAE0C79A05AF, 0xD72E1D521B5F8CF6,
0x0000625EE31652AC, 0x11859D6D69EB16ED,
0x0000228185AA7E79, 0x71E564E405B1DB45,
0x000017A1DF25B888, 0xC11B693EDAABFEA9,
0x00000EA45DCDBB33, 0x3C4233161071EA0F,
0x0000061F47816591, 0x658598C4A8388F8F,
0x00000393CBF3828D, 0x07AD97EABB3463C8,
0x0000018E6B3F54B6, 0xC7F8D44672E5481E,
0x000000AB912D5099, 0xBAF9D5720BE1C2B1,
0x00000057CA74613D, 0x1C7DAB95B466B8C3,
0x00000033E2F25AE1, 0x59238FC6C3BCD19C,
0x00000010E9FE1CA6, 0x810C976112049895,
0x0000000CC5259BF6, 0x5F2ECA75FB67E258,
0x00000006909272EB, 0x5F2558001DB0F8A5,
0x00000002EC4EBA11, 0x23447F2C29D609E8,
0x000000019A380BAB, 0xB41F456E1A0929EC,
0x00000000A96EB3C8, 0x9098C69C7EE64227,
0x00000000780C11AB, 0xFAA26B6E131B9974,
0x0000000021C50E23, 0xC25645B21B0EE302,
0x0000000017E53DCE, 0x1C681CD1116A1E25,
0x0000000008704B4E, 0xC4DFF25B7C3E2241,
0x0000000004A53CB1, 0xBF66DA5414AFF590,
0x00000000036D661C, 0x2F1C1AA7959E535E,
0x0000000001249ECE, 0xA123F17298551D30,
0x00000000008FD72F, 0x0D51A6C743462564,
0x00000000004FA2CB, 0xFDBA99906A9135FA,
0x00000000003246F6, 0xDE565A45F1C1F451,
0x000000000012EED5, 0xF650082813B751AB,
0x00000000000DA947, 0xF6D18E7146237ABD,
0x000000000007DFB6, 0x72F0C0521F7304AE,
0x0000000000026216, 0x39914F38DAFAE55D,
0x000000000001C788, 0x49B116EDFB7D7FEB,
0x0000000000008EDF, 0x76C0DF86C0F56411,
0x0000000000004025, 0x2242B818954A90F7,
0x0000000000002787, 0x4DF9CAF027D5C026,
0x0000000000001829, 0xD4F665D84B86DF00,
0x0000000000000D64, 0x2DB93D7473EA5EEB,
0x0000000000000529, 0xCCEEE32E76ABB9D5,
0x0000000000000233, 0x11FFEC386CB4040A,
0x0000000000000119, 0x887F0B6B28D5D7DA,
0x00000000000000E2, 0x25FCF59E82994FE3,
0x0000000000000078, 0x80BA33E8EA849076,
0x000000000000003E, 0xA080DC08F1F1D72F,
0x0000000000000010, 0xF9F4008C43CD4A61,
0x000000000000000C, 0xCC86D91EFA7E7828,
0x0000000000000004, 0x57A9AA63B82D519A,
0x0000000000000002, 0x27699474A21D9F11,
0x0000000000000001, 0xA7CD2B760362031D,
0x0000000000000000, 0xE13D7554BA4A07A9,
0x0000000000000000, 0x4E3BD058FC359F5D,
0x0000000000000000, 0x3508279047A5E458,
0x0000000000000000, 0x128EF1206D5C63A6,
0x0000000000000000, 0x0D710E70F57D7694,
0x0000000000000000, 0x0517A6E631C93425,
0x0000000000000000, 0x03FC49EE9D245FC9,
0x0000000000000000, 0x01BDC06FAEBF975F,
0x0000000000000000, 0x00A3423332F301E5,
0x0000000000000000, 0x0052947141032018,
0x0000000000000000, 0x0024FA56BCFBE4DC,
0x0000000000000000, 0x00141E05511758B2,
0x0000000000000000, 0x000F75C963361395,
0x0000000000000000, 0x000672FB595CC947,
0x0000000000000000, 0x00036CB29AF806CA,
0x0000000000000000, 0x00010C68C5E1542F,
0x0000000000000000, 0x0000EEBD372AC64A,
0x0000000000000000, 0x00005BC7616B074C,
0x0000000000000000, 0x0000385A9969E8FA,
0x0000000000000000, 0x0000184CF02EDB8A,
0x0000000000000000, 0x0000091E09BBE316,
0x0000000000000000, 0x000005C09A40C152,
0x0000000000000000, 0x0000034E3F952098,
0x0000000000000000, 0x00000178CC031DCC,
0x0000000000000000, 0x000000CD81034EE4,
0x0000000000000000, 0x0000007619DCE3DF,
0x0000000000000000, 0x0000002E8147B88A,
0x0000000000000000, 0x000000170989FE91,
0x0000000000000000, 0x0000000A7F006F72,
0x0000000000000000, 0x0000000570C2E0E7,
0x0000000000000000, 0x000000021DEFDCC4,
0x0000000000000000, 0x00000001B3771C20,
0x0000000000000000, 0x00000000EAFCD9E4,
0x0000000000000000, 0x000000006019304C,
0x0000000000000000, 0x00000000230A325E,
0x0000000000000000, 0x000000001A879835,
0x0000000000000000, 0x000000000D48B41E,
0x0000000000000000, 0x0000000007F23B7B,
0x0000000000000000, 0x000000000217F84E,
0x0000000000000000, 0x00000000012CC815,
0x0000000000000000, 0x0000000000D81E13,
0x0000000000000000, 0x00000000006CE7B5,
0x0000000000000000, 0x00000000002CA00C,
0x0000000000000000, 0x000000000014F1C9,
0x0000000000000000, 0x00000000000C79C1,
0x0000000000000000, 0x000000000004D512,
0x0000000000000000, 0x00000000000376EC,
0x0000000000000000, 0x0000000000005736,
};
BitBasis bb_0QQQQQQQ;
bb_0QQQQQQQ.AddN(bb_0QQQQQQQ_vects, 112);
bb_0QQQQQQQ.Print("bb_0QQQQQQQ");

/*
    // 
    //
    BitBasis bb_00QQQQQQ;
        
    for(INT j=0; 1; j++)
    {
        Vect c = bb_0QQQQQQQ.SpanRandom();

        BitBasis bb;

        for(INT i=0; i<112; ++i)
        {
            Vect d = f_rands[i] + f_evaluatev(c+rands[i]);
            
            bb.AddFast(d);

            if(bb.dimension > 96)
                break;
        }

        if(bb.dimension <= 96)
        {
            printf("found one! ");
            c.Println();
            bb_00QQQQQQ.AddFast(c);
            bb_00QQQQQQ.Print("bb_00QQQQQQ");
        }

        if(!(j&0xFFFF))
            printf("on iter %d\n", j);

        if(bb_00QQQQQQ.dimension == 96)
            break;
    }
*/

UINT64 bb_00QQQQQQ_vects[192] = { // dimension: 96
0x8500CD6AF3038058, 0xF343DDCE23F939FB,
0x6480FF65ADD3A20C, 0x74A12A1499D5F495,
0x21A1798AD1C3E7F2, 0xC7082BD149C345C9,
0x109A9E0FE14B439C, 0x3DB16257E3631BC3,
0x0FD4540C482A2314, 0xCD33BD184D3080DF,
0x048BB88AAA48B1D0, 0x2D786E51F766A9C5,
0x03792C077BF9EE06, 0xFE42677D18023B45,
0x0110D1BFC26E61C0, 0xDEE43B3FC496C5AD,
0x00B033C84611C4AF, 0x9C4E66B7752E21B5,
0x0053353A39A7F910, 0x6A49FBC4F28230F6,
0x003183643D85D912, 0xC1E070E860C00873,
0x00114F0D02C00212, 0xF6FD0772CE918105,
0x000C93986D63D386, 0x84C3171682E8E99B,
0x0005EECAFEB8721D, 0x78F519A2B28B0900,
0x0003F1AB7417A613, 0x27B04DC4BE21CDB7,
0x0001C78F280267A8, 0x91AAFDA69C015C5C,
0x0000CB54F5DE698B, 0xE36B1697D1B1B8C9,
0x00004DF5B629F705, 0x595E165A4A78A980,
0x00002806B4EA4044, 0x0344B18F034C8CD2,
0x0000165325109047, 0x99863C4B062E6551,
0x000008205EC46C69, 0x54BA828888A56AE5,
0x0000045298C4E300, 0x57FDD1647C79A164,
0x000002902DBD27CC, 0x10D09346402930C8,
0x0000017889C69A4A, 0x6CDA63997C665499,
0x000000BF433D14E8, 0x8D6A883098916F79,
0x00000061A40C6FB2, 0x9EA86E04DE8F3529,
0x00000033B543D52A, 0x43A8D04AA478B008,
0x00000013D6EFD3F5, 0x7EAA014CFE1B6212,
0x0000000F10F1BFF7, 0x20EFECE4C8DFD9E9,
0x00000006179F3379, 0x88F1EE986F7D0AAF,
0x00000002D5F999A5, 0x0F71BD0AE3FF25BD,
0x0000000196F71E03, 0x6FD8830387B124DF,
0x00000000BEF8EE71, 0x0DB466BB06C661EB,
0x0000000047A228F5, 0x47A7B71F6484BA53,
0x0000000027744DB5, 0x84EB20345AF50367,
0x0000000018A88BE8, 0x733FF5BDACA5810E,
0x000000000CE5AA6F, 0x1B7FB0F914C3938F,
0x000000000482B19B, 0x566C8C1A8EEB525C,
0x0000000002770625, 0xDECBFD768D5B3655,
0x000000000101FBBA, 0xDDD513EC020CA324,
0x0000000000E052E2, 0x032BF35D2761F129,
0x000000000067E20F, 0x27EDF834B1C61E7A,
0x0000000000319BA6, 0xDE0DB0A8B588E8F8,
0x00000000001C806C, 0xC75E000A937AE5A3,
0x00000000000A6B44, 0x4B8409207288DE4B,
0x00000000000639C1, 0x7277B0109915EEC2,
0x000000000003E7D9, 0x4F69C4830277FECA,
0x000000000001A51A, 0x916F76ECC4D18918,
0x00000000000091FB, 0x1C1A8A545CF0EF70,
0x00000000000055FB, 0x3E51F7F39B66D0C5,
0x0000000000003BC0, 0x2A2DDDD7C468350A,
0x0000000000001655, 0xB676A5155CC013B6,
0x0000000000000F86, 0x4FB14FD88F4EA762,
0x00000000000006E2, 0x6BE61A18A88B8D14,
0x00000000000003FD, 0x126EFF8835EFBACD,
0x000000000000018A, 0x9DFD9F488BE5F299,
0x00000000000000BD, 0x1C5D119F2D0122B8,
0x0000000000000045, 0x5F01C68452EC9AE8,
0x0000000000000025, 0x4CD0F41BF5F0E4D1,
0x0000000000000019, 0x3E469F9BD038C7DB,
0x000000000000000F, 0xC9C7C8EDBAC749A4,
0x0000000000000005, 0x3E89CFA6DD00CBAE,
0x0000000000000002, 0x7FA321F6B30EA8D6,
0x0000000000000001, 0x2D1922FA2482AC1B,
0x0000000000000000, 0x85F143E5F141EFA6,
0x0000000000000000, 0x4478A046A43EECEB,
0x0000000000000000, 0x2CB75FAD6A64CEB8,
0x0000000000000000, 0x159DED11A795FD38,
0x0000000000000000, 0x0C6FD40199803387,
0x0000000000000000, 0x076B53398BC6DD4F,
0x0000000000000000, 0x03E553A92CF0BDE6,
0x0000000000000000, 0x01439D688A6BB296,
0x0000000000000000, 0x008862DB330D27F5,
0x0000000000000000, 0x0072FE4E2B4C3F43,
0x0000000000000000, 0x0037DBCB956F2265,
0x0000000000000000, 0x001767988DE016C2,
0x0000000000000000, 0x0008552274DE4310,
0x0000000000000000, 0x000676E19264EA7A,
0x0000000000000000, 0x0003A0BCF1328EEE,
0x0000000000000000, 0x0001A8DEC3D15AF1,
0x0000000000000000, 0x0000AF37D75049F9,
0x0000000000000000, 0x000066CEAB4CEBBC,
0x0000000000000000, 0x0000298A673A9F65,
0x0000000000000000, 0x000010906B103099,
0x0000000000000000, 0x00000B12794084C2,
0x0000000000000000, 0x000006A3066296EC,
0x0000000000000000, 0x00000300C7609C8F,
0x0000000000000000, 0x000001F5FE9A13AE,
0x0000000000000000, 0x000000FACEB66F7E,
0x0000000000000000, 0x00000042E82F2CCB,
0x0000000000000000, 0x00000033FA5977AC,
0x0000000000000000, 0x000000146C54A7CA,
0x0000000000000000, 0x0000000587BBF140,
0x0000000000000000, 0x000000021A053881,
0x0000000000000000, 0x000000012B7C0EA9,
0x0000000000000000, 0x00000000019FC57B,
};
BitBasis bb_00QQQQQQ;
bb_00QQQQQQ.AddN(bb_00QQQQQQ_vects, 96);
bb_00QQQQQQ.Print("bb_00QQQQQQ");

/*
    // 
    //
    BitBasis bb_000QQQQQ;
        
    for(INT j=0; 1; j++)
    {
        Vect c = bb_00QQQQQQ.SpanRandom();

        BitBasis bb;

        for(INT i=0; i<96; ++i)
        {
            Vect d = f_rands[i] + f_evaluatev(c+rands[i]);
            
            bb.AddFast(d);

            if(bb.dimension > 80)
                break;
        }

        if(bb.dimension <= 80)
        {
            printf("found one! ");
            c.Println();
            bb_000QQQQQ.AddFast(c);
            bb_000QQQQQ.Print("bb_000QQQQQ");
        }

        if(!(j&0xFFFF))
            printf("on iter %d\n", j);

        if(bb_000QQQQQ.dimension == 80)
            break;
    }
*/
UINT64 bb_000QQQQQ_vects[160] = { // dimension: 80
0xE3F63AE17524E3CB, 0x2B80732424CBF8F0,
0x43467983174807FA, 0xFD339B9FF7D6B56B,
0x30ECBD7254CA6DBA, 0xC0617E942B52F5C9,
0x1075F9ED8C8FB140, 0x546882240539E2C2,
0x0CB00C8BCF9A9C02, 0xB3259A5F0C4C6C82,
0x04E31487DBB32BCC, 0x8E5ED60D76EF3246,
0x03F08AEE5B32A1AC, 0x68D2CC9D5EC17314,
0x01107F51086C3E53, 0x663DCBB116A77E44,
0x00880A8101C1D4FD, 0x4995FEEA07F02CCE,
0x00586BE55AC85206, 0xCBA2302E2CED50C6,
0x00379D97966DF508, 0xBFD166C93D1413AC,
0x001A6C22B94FDF59, 0x525DF7898D1E83EF,
0x000EA33215BF6CDF, 0x5E9312F5305EC16D,
0x00065E7532758205, 0x2DDDBB047ACE794B,
0x000315007D4A4A52, 0x5AC3849641E7BD7A,
0x00012B440ED19886, 0x3B498DA33B2F0C85,
0x0000D9AAE34E3071, 0xFA11EDB5C84878F2,
0x0000762FC600B691, 0x51CEFB7743B26D74,
0x0000302AD5E6D2FD, 0xE3346B0575807A18,
0x00001658043FB0B5, 0x6A18396548974872,
0x00000902F760D189, 0x557F6EC7E327C34A,
0x0000045E9490D786, 0x0785602DAA3A25A0,
0x0000023A617F8622, 0xC3DABB30199952FF,
0x0000015CA38EA83E, 0xD4258ABAEBFF1D2E,
0x0000008B4D6D949A, 0xAB6B9080423D3B59,
0x0000006F8A277DED, 0x8857225472FF6C05,
0x000000234EF9DEB3, 0x95AE071F42B8F86D,
0x0000001E88306686, 0xEEB7E13F6E35CA5E,
0x0000000AC8704CD9, 0x0C7B6E0821EAB117,
0x00000007785B6237, 0xC767816879C240E8,
0x0000000235DA4B79, 0x7537606A3ED9B73F,
0x000000014BE08D5B, 0xF59B42C40AFE0400,
0x00000000A41B9F3F, 0x7143FAF92AE7C757,
0x0000000077B52A05, 0x7C4CFA9F17A1BE31,
0x0000000026521016, 0x6CF3CCEA68C6E57F,
0x000000001E6B83C2, 0x0121CC94180B7DAB,
0x000000000E58A88B, 0x3BA62F41EEEBBA4B,
0x00000000068872A6, 0x3F3DFE1D771B026D,
0x0000000002AC6C0F, 0x25DD86A9B04804FA,
0x0000000001BD89CC, 0xD052F33D4340A98A,
0x00000000008DFD33, 0x9475E7FB8631AD78,
0x0000000000600656, 0xB350034C13C7717C,
0x00000000003FDE78, 0x7EE68EB7FB4CFDC0,
0x000000000014C0F2, 0x9B224E77FD8787ED,
0x000000000009ED1A, 0x171F3E0B2ADF87CA,
0x00000000000764E2, 0xF012139F8D180B7B,
0x0000000000021A1E, 0xF3F81B323EA2DD48,
0x000000000001967E, 0x5D1E7607D58C72C7,
0x0000000000008FC1, 0xF6FDAB4029C7F02D,
0x0000000000007004, 0x947A05DC31864CFE,
0x0000000000003CB2, 0x6AD6EA52AB9CEB00,
0x0000000000001D31, 0xC5A9C939E9BD1F51,
0x00000000000008C0, 0x8A626B06BE44C149,
0x0000000000000552, 0x9958C83A5EFD4307,
0x00000000000003B0, 0xECCBCE21A4565ABD,
0x00000000000001BC, 0xF287D134F6C2F9FE,
0x00000000000000A4, 0x12117038EF432656,
0x0000000000000060, 0xA424EDEB8F82B92E,
0x000000000000003A, 0xC05F4C9B6289211F,
0x0000000000000014, 0x1E9ACF47AA04A846,
0x000000000000000A, 0x03070D2BE1E2B5A8,
0x0000000000000007, 0x46A78C579206261C,
0x0000000000000003, 0x681C0169F95FE4A9,
0x0000000000000001, 0x9FCF87D93317915A,
0x0000000000000000, 0x81FFD25A308C6E98,
0x0000000000000000, 0x519F393952C47FCB,
0x0000000000000000, 0x27004A8A5B4E4110,
0x0000000000000000, 0x151062E3DE4DF2BE,
0x0000000000000000, 0x0966616283AED4F2,
0x0000000000000000, 0x059E0785D9BD29FA,
0x0000000000000000, 0x02F15414E93808EF,
0x0000000000000000, 0x01F784A680B50F49,
0x0000000000000000, 0x00F42C1457D7B428,
0x0000000000000000, 0x0053F647299CE91E,
0x0000000000000000, 0x00294543AC844FBF,
0x0000000000000000, 0x0018AD574B2D0A3C,
0x0000000000000000, 0x000FD5F549E779DC,
0x0000000000000000, 0x000496E7823AEA48,
0x0000000000000000, 0x00022FE5665ABCFC,
0x0000000000000000, 0x000160B2B951238C,
};
BitBasis bb_000QQQQQ;
bb_000QQQQQ.AddN(bb_000QQQQQ_vects, 80);
bb_000QQQQQ.Print("bb_000QQQQQ");

/*
    // 
    //
    BitBasis bb_0000QQQQ;
        
    for(INT j=0; 1; j++)
    {
       Vect c = bb_000QQQQQ.SpanRandom();

        BitBasis bb;

        for(INT i=0; i<80; ++i)
        {
            Vect d = f_rands[i] + f_evaluatev(c+rands[i]);
            
            bb.AddFast(d);

            if(bb.dimension > 64)
                break;
        }

        if(bb.dimension <= 64)
        {
            printf("found one! ");
            c.Println();
            bb_0000QQQQ.AddFast(c);
            bb_0000QQQQ.Print("bb_0000QQQQ");
        }

        if(!(j&0xFFFF))
            printf("on iter %d\n", j);

        if(bb_0000QQQQ.dimension == 64)
            break;
    }
*/
UINT64 bb_0000QQQQ_vects[128] = { // dimension: 64
0x825E92B91648931D, 0xC734323BE1004A5C,
0x7BA31EF81A1B8931, 0x7920A10D743BF2C3,
0x2018A32E214C2288, 0x4EF344D40945933B,
0x102E9EC4E906A739, 0x01B49CD8BBA5D36C,
0x086E18A7CDEE7D6F, 0x5DD4FFFD9A46C622,
0x041288087D0D047E, 0x72870C725C706F93,
0x023F851398C1C4F0, 0x5BB7BF715D9F159E,
0x01018E193C1DB8D0, 0xDB3D79845E2DEAB3,
0x00879802CAAF44EA, 0xC33D718A41E3BB61,
0x0040D20FDB7D7374, 0x2CCDCCAA43990CAF,
0x002B8BA7F451B941, 0x1F1AF9BC8BF1258F,
0x00107D4E587E989A, 0xA5AF432DDFE365E7,
0x000FB97D0AA42EB4, 0xE9A9B6BFB0A4CB4F,
0x000585483BE462E5, 0x5F294C787ADDEAFC,
0x0003BF788A0EB788, 0x03DE0E245AA92E7B,
0x000111F9578BDE1C, 0xB566420368787BEA,
0x0000947F2B70B073, 0x821ECBD80162516B,
0x000056DB802B4699, 0xFC28DCDFE31D19E9,
0x00003CBFB6653293, 0x0AA4D44B029E1AF8,
0x0000109B4048167B, 0x54B0B274C69C7D3F,
0x000009B94C3D4455, 0x6869CBD4CA4B9EBE,
0x000004B897D9E728, 0x9D8D0320EF1EA2A8,
0x00000268CE4CD166, 0x44A9A9E21AE99D53,
0x0000011D6122F389, 0xE8D2AD1E1E2513AA,
0x000000B1C2B2C72B, 0x377F30376819D321,
0x000000793D32C972, 0x239770CE2263EF12,
0x00000023E1CE87E8, 0x66252F5A074309D8,
0x00000019279AC3C4, 0xD830D4018834A748,
0x00000009190C2FF9, 0x14A7DE01F093946B,
0x0000000559633E3B, 0xB1390842B4771B63,
0x000000029EE3B2E7, 0x9ED5694C85073D46,
0x00000001C15846E0, 0x5D2297F9C859E6CE,
0x00000000DEED726B, 0xFA861DED26D665C3,
0x000000007CC457C0, 0x0A612C0F159808B4,
0x000000002B60FD65, 0x7DAAB2018C2318F6,
0x000000001983E57D, 0x7004F58A44F5CAA5,
0x000000000AFBB412, 0x7DD8B2E29A6EF413,
0x0000000007769628, 0x2D9063D38658CCB7,
0x0000000003ADF72A, 0x401B9F6AC305D319,
0x0000000001BA1229, 0x214A9B75580FA727,
0x000000000092B5FC, 0xEA048C9AE5A3208D,
0x0000000000681D07, 0xD7FA395E031F6AEE,
0x00000000003C8A19, 0x3D9C0E2ACD964CC0,
0x0000000000191C67, 0x6C9EF685B4D66FF5,
0x00000000000F4334, 0x62649BC183ED111A,
0x00000000000595A3, 0xB94EDEC54997B36C,
0x000000000002E197, 0x22E43666E9197182,
0x0000000000017950, 0x6E14A6E8D4C7FF01,
0x0000000000008784, 0x75B8D4DF1E1E1DE2,
0x0000000000006383, 0x02C09A016F916C05,
0x0000000000003A82, 0xEE15729EF655880E,
0x00000000000018A3, 0xE0A87823E3A45A16,
0x0000000000000C42, 0x32F9DCE62D0056BC,
0x0000000000000709, 0x10883B31442C2FB6,
0x00000000000002FE, 0x2D22A3721488C659,
0x00000000000001DC, 0x87D2F1F9F5CB50C6,
0x00000000000000AE, 0xB73DE06333B76889,
0x0000000000000067, 0x4867CB3D79488A7A,
0x0000000000000032, 0x5C9BEF63E0A4FDD8,
0x0000000000000014, 0xF81DB16C99733859,
0x000000000000000B, 0xB2F3E21AD33F025E,
0x0000000000000007, 0x92BE4505F6BD1724,
0x0000000000000003, 0xF5656A4141DDF21D,
0x0000000000000000, 0xF1B06299348C024D,
};
BitBasis bb_0000QQQQ;
bb_0000QQQQ.AddN(bb_0000QQQQ_vects, 64);
bb_0000QQQQ.Print("bb_0000QQQQ");

/*
    // 
    //
    BitBasis bb_00000QQQ;
        
    for(INT j=0; 1; j++)
    {
       Vect c = bb_0000QQQQ.SpanRandom();

        BitBasis bb;

        for(INT i=0; i<64; ++i)
        {
            Vect d = f_rands[i] + f_evaluatev(c+rands[i]);
            
            bb.AddFast(d);

            if(bb.dimension > 48)
                break;
        }

        if(bb.dimension <= 48)
        {
            printf("found one! ");
            c.Println();
            bb_00000QQQ.AddFast(c);
            bb_00000QQQ.Print("bb_00000QQQ");
        }

        if(!(j&0xFFFF))
            printf("on iter %d\n", j);

        if(bb_00000QQQ.dimension == 48)
            break;
    }
*/

UINT64 bb_00000QQQ_vects[96] = { // dimension: 48
0xF94340942D263A0C, 0xEE6AAE18101C16D4,
0x4E21876392247EE8, 0xCBA6B9F71EB808B0,
0x320F58557E28CF8F, 0x9DAE125E98BFD656,
0x121B0A3E1B494B3F, 0xCE876A64F5CFBA59,
0x0FEED1A4CCE76DFD, 0x265A850EA970A530,
0x049582422772601C, 0x1C7A93E2C94FE6AC,
0x020F2AA43A408ABF, 0x684BE2D88064ABE1,
0x013825F3624A247A, 0xE4725CD220CEAD16,
0x00A795F1843F88FA, 0x72A6CAA92A078FA1,
0x007543E917605253, 0x3BEC710E8FA30C5D,
0x00283C32BA61A242, 0xCAF4FD97B0E4190E,
0x0018841F856063E1, 0x2885D86BB11293F4,
0x00084845222FDB92, 0xAFC81307804B6AB2,
0x0005803A00FB4D91, 0x9D0E6FBF16431D57,
0x0002EE780E94AEB8, 0xDC087A10C0294913,
0x0001800536073D39, 0x8C887A908D89C34B,
0x0000A924E686392D, 0x40C7B153A437B9AD,
0x0000752E4AF0D354, 0x877A9CBC2D9B54D5,
0x00002911FF9BB012, 0x239ABF57D235D1C7,
0x0000122D9FD2914B, 0x3027BB3DB3F24B52,
0x00000AE3B25231CE, 0x1B4258526154E9A0,
0x0000053E2FAFB5B5, 0x78F80C0FB2070A05,
0x000002BB9EC0E70C, 0xBABC112E0CDE75F7,
0x000001A4485E6EA4, 0xDF043B3A95FBA5D8,
0x000000948546DAF0, 0xEE91F92D4BC60FED,
0x000000684780F8A0, 0x8C7D70B4CDCBEAB3,
0x000000275D35D5F1, 0xA0D666B4FA9EE18E,
0x0000001A613469D5, 0xD9D2598FB64291B8,
0x00000008EEBDFEC2, 0xA9279B5E24B2592F,
0x00000004FCE65A76, 0x2792796724F9DDE7,
0x00000002DB43892A, 0xE40883BA527C1F80,
0x000000016C3F71F2, 0x2D9C3857D78233FF,
0x00000000983F1659, 0x8AE6669E8006E70D,
0x00000000747A4AAB, 0x47D51758E7F05206,
0x0000000037AF960E, 0xA2D44707885C2048,
0x00000000185DAF5B, 0x4B5263729D2B8D8A,
0x000000000BBBDB61, 0x2431663B150DE1C0,
0x0000000004503835, 0xE19A790C4C2F6273,
0x0000000003FDBDD0, 0x4361B5099DF460E9,
0x0000000001D0FD3A, 0x7EA7679B644B0057,
0x0000000000E575AA, 0xF299EF90FC9CA20F,
0x0000000000667E58, 0x2C528BD0BFB76D65,
0x00000000002706FC, 0xA35D7DB996BE309B,
0x00000000001335CF, 0x30D1ECB9E6DDD220,
0x000000000005DCFF, 0x955774A68F3877A6,
0x000000000002DFA6, 0x0B446F9FEADC3280,
0x0000000000012130, 0xD88DAB84E4B10C38,
0x00000000000086AB, 0xE78D0BD9E7E0A001,
};
BitBasis bb_00000QQQ;
bb_00000QQQ.AddN(bb_00000QQQ_vects, 48);
bb_00000QQQ.Print("bb_00000QQQ");

/*
    // 
    //
    BitBasis bb_000000QQ;
        
    for(INT j=0; 1; j++)
    {
       Vect c = bb_00000QQQ.SpanRandom();

        BitBasis bb;

        for(INT i=0; i<48; ++i)
        {
            Vect d = f_rands[i] + f_evaluatev(c+rands[i]);
            
            bb.AddFast(d);

            if(bb.dimension > 32)
                break;
        }

        if(bb.dimension <= 32)
        {
            printf("found one! ");
            c.Println();
            bb_000000QQ.AddFast(c);
            bb_000000QQ.Print("bb_000000QQ");
        }

        if(!(j&0xFFFF))
            printf("on iter %d\n", j);

        if(bb_000000QQ.dimension == 32)
            break;
    }
*/
UINT64 bb_000000QQ_vects[64] = { // dimension: 32
0xB07B30B3C1862D71, 0xBD1712D171B71686,
0x791F2D09270C96ED, 0x15832B0F035FEBB1,
0x2678C493A6F33023, 0xA1717A11437BD4D2,
0x147E424B449BD7E7, 0x129C8DFF63EB5B4E,
0x0B0CD149CC4DC2FF, 0x31EC527A309925CD,
0x05277CCD138A3A0B, 0xE7AC650B0B0E5832,
0x02D7F1C8885DB017, 0x1D08C272C6707C6E,
0x01CCC156860558C5, 0x38C687614F46531A,
0x00D195EB1D8735D4, 0xE93D8D2EC0E448C1,
0x00452DC701344FA9, 0x0E1F5044FCEE5F28,
0x0034B25C36E52E06, 0x46666FAE4EA7D6FD,
0x0015D76331C39D98, 0x254337CA78CF06D1,
0x000D0893C5BE1D90, 0x211FEF5163456C72,
0x000574126EF7394D, 0x623EA677D27A179E,
0x0002CA860CFD68CC, 0x1C4EF205F9A4A492,
0x000119B085AA3A8D, 0x2BF7E666149F4A27,
0x0000EF8629B36B4F, 0x6F982D42F07B7A69,
0x00005185F5FF96A5, 0xB055C516A7AA15B0,
0x00003A26EE609D33, 0xC78D7A78ED19EBA9,
0x00001F721CA5DA2B, 0x6E0F8260D39C4403,
0x0000085A4F472E83, 0xD7E472BA42E9825D,
0x000006558233E131, 0x2FFF8B00D4839D7B,
0x000002832F67359F, 0x26D1BB8452F6B298,
0x0000019EC5D1504C, 0x352EF988C19A4310,
0x000000E3B111D27E, 0x51C121317ECC2F82,
0x000000495E9B24CF, 0x0801CACD2D952184,
0x00000034ADD725BB, 0xAD4113446C5A8CDA,
0x0000001FC95F776E, 0x76EB43A68E06AC74,
0x00000008CA11695C, 0x96093680D854B722,
0x0000000764ED34CB, 0x785839DB91EE7A2F,
0x0000000322403D30, 0x74C899C6AAA3FFCD,
0x0000000149A516C1, 0xAAC8D2405A3EE113,
};
BitBasis bb_000000QQ;
bb_000000QQ.AddN(bb_000000QQ_vects, 32);
bb_000000QQ.Print("bb_000000QQ");


/*
    // 
    //
    BitBasis bb_0000000Q;
        
    for(INT j=0; 1; j++)
    {
       Vect c = bb_000000QQ.SpanRandom();

        BitBasis bb;

        for(INT i=0; i<32; ++i)
        {
            Vect d = f_rands[i] + f_evaluatev(c+rands[i]);
            
            bb.AddFast(d);

            if(bb.dimension > 16)
                break;
        }

        if(bb.dimension <= 16)
        {
            printf("found one! ");
            c.Println();
            bb_0000000Q.AddFast(c);
            bb_0000000Q.Print("bb_0000000Q");
        }

        if(!(j&0xFFFF))
            printf("on iter %d\n", j);

        //if(bb_0000000Q.dimension == 16)
        //    break;
    }
*/

UINT64 bb_0000000Q_vects[32] = { // dimension: 16
0xEB031A209BA25981, 0xC59C3E6EB6BECC1F,
0x54C61997B19A1DE5, 0x406150883B13B9DF,
0x2491DF64E974CE95, 0xF04EB3EDA927D40B,
0x1D21F683CFCC0536, 0x05FD85755BC8165F,
0x080106B7F4A70541, 0xF80AE7BE0611F13F,
0x042DBDAFE24D9DD6, 0x0D00C6FCFDB7996B,
0x02E0ABE54650990F, 0xCD96C11E130690A4,
0x01DBFC2226C5AAA8, 0x8CBA5E39E55B2E68,
0x00AD31374D2CA45D, 0xD65DF41DE3451586,
0x0041B28F900526A8, 0xE0D9658DDEBAF372,
0x00231B8509AEF0E0, 0xA60AD86797BD60D1,
0x0017EB40CCB6ACFA, 0x1BF541F04D4284B0,
0x000A8B4B09EDC282, 0x3932F7699135AC55,
0x0006402F9D92D905, 0x117BDF999F45A247,
0x00033E9C6F01E51A, 0x81681B047D9C4CB3,
0x000080677CD125D0, 0xADE627162B7780B3,
};
BitBasis bb_0000000Q;
bb_0000000Q.AddN(bb_0000000Q_vects, 16);
bb_0000000Q.Print("bb_0000000Q");

    // check subspaces
    UINT dim;
    BitBasis ss = bb_000000QQ;
    dim = ss.dimension;
    for(INT i=0; i<bb_0000000Q.dimension; ++i)
        ss.AddFast(bb_0000000Q.vects[i]);
    if(ss.dimension != dim)
        printf("WTF!!!!!!!!!\n");
    ss = bb_00000QQQ;
    dim = ss.dimension;
    for(INT i=0; i<bb_000000QQ.dimension; ++i)
        ss.AddFast(bb_000000QQ.vects[i]);
    if(ss.dimension != dim)
        printf("WTF!!!!!!!!!\n");
    ss = bb_0000QQQQ;
    dim = ss.dimension;
    for(INT i=0; i<bb_00000QQQ.dimension; ++i)
        ss.AddFast(bb_00000QQQ.vects[i]);
    if(ss.dimension != dim)
        printf("WTF!!!!!!!!!\n");
    ss = bb_000QQQQQ;
    dim = ss.dimension;
    for(INT i=0; i<bb_0000QQQQ.dimension; ++i)
        ss.AddFast(bb_0000QQQQ.vects[i]);
    if(ss.dimension != dim)
        printf("WTF!!!!!!!!!\n");
    ss = bb_00QQQQQQ;
    dim = ss.dimension;
    for(INT i=0; i<bb_000QQQQQ.dimension; ++i)
        ss.AddFast(bb_000QQQQQ.vects[i]);
    if(ss.dimension != dim)
        printf("WTF!!!!!!!!!\n");
    ss = bb_0QQQQQQQ;
    dim = ss.dimension;
    for(INT i=0; i<bb_00QQQQQQ.dimension; ++i)
        ss.AddFast(bb_00QQQQQQ.vects[i]);
    if(ss.dimension != dim)
        printf("WTF!!!!!!!!!\n");


    // ok we have gone all the way down, now let's come back up..
    //
    // now build 000000QR
    // these are the 16 vectors that, together with 0000000Q, span 000000QQ
    // the 'R' denotes random bits (this is not a nice normal basis 000000Q0, but it
    // is not necessary to have this... any R we generate when targetting the Q
    // position can be cancelled using 0000000Q basis!
    //
    BitBasis bb_000000QR;
    BitBasis bb_0000000Q_temp = bb_0000000Q;

    while(1)
    {
        Vect vr = bb_000000QQ.SpanRandom();

        INT dimension_before = bb_0000000Q_temp.dimension;
        bb_0000000Q_temp.AddFast(vr);

        if(bb_0000000Q_temp.dimension > dimension_before)
        {
            bb_000000QR.AddFast(vr);
        }
        
        if(bb_000000QR.dimension == 16)
            break;

    }
    bb_000000QR.Print("bb_000000QR");

    //
    //
    BitBasis bb_00000QRR;
    BitBasis bb_000000QQ_temp = bb_000000QQ;

    while(1)
    {
        Vect vr = bb_00000QQQ.SpanRandom();

        INT dimension_before = bb_000000QQ_temp.dimension;
        bb_000000QQ_temp.AddFast(vr);

        if(bb_000000QQ_temp.dimension > dimension_before)
        {
            bb_00000QRR.AddFast(vr);
        }
        
        if(bb_00000QRR.dimension == 16)
            break;

    }
    bb_00000QRR.Print("bb_00000QRR");

    //
    //
    BitBasis bb_0000QRRR;
    BitBasis bb_00000QQQ_temp = bb_00000QQQ;

    while(1)
    {
        Vect vr = bb_0000QQQQ.SpanRandom();

        INT dimension_before = bb_00000QQQ_temp.dimension;
        bb_00000QQQ_temp.AddFast(vr);

        if(bb_00000QQQ_temp.dimension > dimension_before)
        {
            bb_0000QRRR.AddFast(vr);
        }
        
        if(bb_0000QRRR.dimension == 16)
            break;

    }
    bb_0000QRRR.Print("bb_0000QRRR");

    //
    //
    BitBasis bb_000QRRRR;
    BitBasis bb_0000QQQQ_temp = bb_0000QQQQ;

    while(1)
    {
        Vect vr = bb_000QQQQQ.SpanRandom();

        INT dimension_before = bb_0000QQQQ_temp.dimension;
        bb_0000QQQQ_temp.AddFast(vr);

        if(bb_0000QQQQ_temp.dimension > dimension_before)
        {
            bb_000QRRRR.AddFast(vr);
        }
        
        if(bb_000QRRRR.dimension == 16)
            break;

    }
    bb_000QRRRR.Print("bb_000QRRRR");

    //
    //
    BitBasis bb_00QRRRRR;
    BitBasis bb_000QQQQQ_temp = bb_000QQQQQ;

    while(1)
    {
        Vect vr = bb_00QQQQQQ.SpanRandom();

        INT dimension_before = bb_000QQQQQ_temp.dimension;
        bb_000QQQQQ_temp.AddFast(vr);

        if(bb_000QQQQQ_temp.dimension > dimension_before)
        {
            bb_00QRRRRR.AddFast(vr);
        }
        
        if(bb_00QRRRRR.dimension == 16)
            break;

    }
    bb_00QRRRRR.Print("bb_00QRRRRR");

    //
    //
    BitBasis bb_0QRRRRRR;
    BitBasis bb_00QQQQQQ_temp = bb_00QQQQQQ;

    while(1)
    {
        Vect vr = bb_0QQQQQQQ.SpanRandom();

        INT dimension_before = bb_00QQQQQQ_temp.dimension;
        bb_00QQQQQQ_temp.AddFast(vr);

        if(bb_00QQQQQQ_temp.dimension > dimension_before)
        {
            bb_0QRRRRRR.AddFast(vr);
        }
        
        if(bb_0QRRRRRR.dimension == 16)
            break;

    }
    bb_0QRRRRRR.Print("bb_0QRRRRRR");

    //
    //
    BitBasis bb_QRRRRRRR;
    BitBasis bb_0QQQQQQQ_temp = bb_0QQQQQQQ;

    while(1)
    {
        Vect vr;
        vr.Random(); //= bb_0QQQQQQQ.SpanRandom();

        INT dimension_before = bb_0QQQQQQQ_temp.dimension;
        bb_0QQQQQQQ_temp.AddFast(vr);

        if(bb_0QQQQQQQ_temp.dimension > dimension_before)
        {
            bb_QRRRRRRR.AddFast(vr);
        }
        
        if(bb_QRRRRRRR.dimension == 16)
            break;

    }
    bb_QRRRRRRR.Print("bb_QRRRRRRR");

    // ensure they are all independent
    ss = BitBasis();
    for(INT i=0; i<16; ++i)
    {
        ss.AddFast(bb_0000000Q.vects[i]);
        ss.AddFast(bb_000000QR.vects[i]);
        ss.AddFast(bb_00000QRR.vects[i]);
        ss.AddFast(bb_0000QRRR.vects[i]);
        ss.AddFast(bb_000QRRRR.vects[i]);
        ss.AddFast(bb_00QRRRRR.vects[i]);
        ss.AddFast(bb_0QRRRRRR.vects[i]);
        ss.AddFast(bb_QRRRRRRR.vects[i]);
    }
    if(ss.dimension == 128)
        printf("good\n");
    else
        printf("WTF!!!!!!!!!\n");


    // at this point, QRRRRRRR, 0QRRRRRR, 00QRRRRR, 000QRRRR, 0000QRRR, 00000QRR, 000000QR, 0000000Q are linearly independent subspaces
    // of the entire space QQQQQQQQ before the core function and final transformation
    //
    // they should have corresponding subspaces (but of size QQQQ, 0QQQ, 00QQ, 0Q, respectively) on the other side of L2
    //
    // that's what I will find here....

    BitBasis disclude;

    //
    //
    BitBasis bb_final_0000000Q;

    bb_0000000Q.SpanAllInit();
    while(bb_0000000Q.SpanAllNext(&x))
    {
        bb_final_0000000Q.AddFast(f_evaluatev(x));
        disclude.AddFast(f_evaluatev(x));
    }
    bb_final_0000000Q.Print("bb_final_0000000Q");

    //
    //
    BitBasis bb_final_000000QR;

    bb_000000QR.SpanAllInit();
    while(bb_000000QR.SpanAllNext(&x))
    {
        y = f_evaluatev(x);
        if(disclude.DoesSpan(y))
            continue;

        bb_final_000000QR.AddFast(y);
        disclude.AddFast(y);
    }
    bb_final_000000QR.Print("bb_final_000000QR");

    //
    //
    BitBasis bb_final_00000QRR;

    bb_00000QRR.SpanAllInit();
    while(bb_00000QRR.SpanAllNext(&x))
    {
        y = f_evaluatev(x);
        if(disclude.DoesSpan(y))
            continue;

        bb_final_00000QRR.AddFast(y);
        disclude.AddFast(y);
    }
    bb_final_00000QRR.Print("bb_final_00000QRR");

    //
    //
    BitBasis bb_final_0000QRRR;

    bb_0000QRRR.SpanAllInit();
    while(bb_0000QRRR.SpanAllNext(&x))
    {
        y = f_evaluatev(x);
        if(disclude.DoesSpan(y))
            continue;

        bb_final_0000QRRR.AddFast(y);
        disclude.AddFast(y);
    }
    bb_final_0000QRRR.Print("bb_final_0000QRRR");

    //
    //
    BitBasis bb_final_000QRRRR;

    bb_000QRRRR.SpanAllInit();
    while(bb_000QRRRR.SpanAllNext(&x))
    {
        y = f_evaluatev(x);
        if(disclude.DoesSpan(y))
            continue;

        bb_final_000QRRRR.AddFast(y);
        disclude.AddFast(y);
    }
    bb_final_000QRRRR.Print("bb_final_000QRRRR");

    //
    //
    BitBasis bb_final_00QRRRRR;

    bb_00QRRRRR.SpanAllInit();
    while(bb_00QRRRRR.SpanAllNext(&x))
    {
        y = f_evaluatev(x);
        if(disclude.DoesSpan(y))
            continue;

        bb_final_00QRRRRR.AddFast(y);
        disclude.AddFast(y);
    }
    bb_final_00QRRRRR.Print("bb_final_00QRRRRR");

    //
    //
    BitBasis bb_final_0QRRRRRR;

    bb_0QRRRRRR.SpanAllInit();
    while(bb_0QRRRRRR.SpanAllNext(&x))
    {
        y = f_evaluatev(x);
        if(disclude.DoesSpan(y))
            continue;

        bb_final_0QRRRRRR.AddFast(y);
        disclude.AddFast(y);
    }
    bb_final_0QRRRRRR.Print("bb_final_0QRRRRRR");

    //
    //
    BitBasis bb_final_QRRRRRRR;

    bb_QRRRRRRR.SpanAllInit();
    while(bb_QRRRRRRR.SpanAllNext(&x))
    {
        y = f_evaluatev(x);
        if(disclude.DoesSpan(y))
            continue;

        bb_final_QRRRRRRR.AddFast(y);
        disclude.AddFast(y);
    }
    bb_final_QRRRRRRR.Print("bb_final_QRRRRRRR");

    // verify subspaces
    ss = BitBasis();
    for(INT i=0; i<16; ++i)
    {
        ss.AddFast(bb_final_0000000Q.vects[i]);
        ss.AddFast(bb_final_000000QR.vects[i]);
        ss.AddFast(bb_final_00000QRR.vects[i]);
        ss.AddFast(bb_final_0000QRRR.vects[i]);
        ss.AddFast(bb_final_000QRRRR.vects[i]);
        ss.AddFast(bb_final_00QRRRRR.vects[i]);
        ss.AddFast(bb_final_0QRRRRRR.vects[i]);
        ss.AddFast(bb_final_QRRRRRRR.vects[i]);
    }
    if(ss.dimension == 120)
        printf("good2\n");
    else
        printf("WTF!!!!!!!!!\n");


    printf("DONE!!!!!!!!!!!!!!!\n\n\n");
    bb_0QQQQQQQ.Print("bb_0QQQQQQQ");
    bb_00QQQQQQ.Print("bb_00QQQQQQ");
    bb_000QQQQQ.Print("bb_000QQQQQ"); 
    bb_0000QQQQ.Print("bb_0000QQQQ");
    bb_00000QQQ.Print("bb_00000QQQ");
    bb_000000QQ.Print("bb_000000QQ");
    bb_0000000Q.Print("bb_0000000Q"); 

    bb_QRRRRRRR.Print("bb_QRRRRRRR");
    bb_0QRRRRRR.Print("bb_0QRRRRRR");
    bb_00QRRRRR.Print("bb_00QRRRRR");
    bb_000QRRRR.Print("bb_000QRRRR"); 
    bb_0000QRRR.Print("bb_0000QRRR");
    bb_00000QRR.Print("bb_00000QRR");
    bb_000000QR.Print("bb_000000QR");
    bb_0000000Q.Print("bb_0000000Q"); 

    bb_final_QRRRRRRR.Print("bb_final_QRRRRRRR");
    bb_final_0QRRRRRR.Print("bb_final_0QRRRRRR");
    bb_final_00QRRRRR.Print("bb_final_00QRRRRR");
    bb_final_000QRRRR.Print("bb_final_000QRRRR");
    bb_final_0000QRRR.Print("bb_final_0000QRRR");
    bb_final_00000QRR.Print("bb_final_00000QRR");
    bb_final_000000QR.Print("bb_final_000000QR");
    bb_final_0000000Q.Print("bb_final_0000000Q");

    return 0;
}
